" clear all autocommands
autocmd!

" {{{ Pathogen

let s:vim_conf = expand('<sfile>:p')
let s:vim_dir = fnamemodify(s:vim_conf, ':h') . '/.vim'

runtime pathogen/autoload/pathogen.vim

execute pathogen#infect(s:vim_dir . '/bundle/themes/{}')
execute pathogen#infect(s:vim_dir . '/bundle/languages/{}')
execute pathogen#infect(s:vim_dir . '/bundle/tools/{}')
execute pathogen#helptags()

" }}}

" {{{ File type / Syntax detection / Theme

syntax enable
filetype plugin indent on
set t_Co=256
set background=dark
colorscheme wombat256mod
hi CursorLine cterm=bold

" }}}

" {{{ Global options

set nocompatible        " break away from old vi compatibility
set shell=zsh           " shell for :sh
set autoread            " watch for file changes by other programs
set autowrite           " automatically save before :next and :make
set laststatus=2        " status line always on
set encoding=utf-8      " ensure proper encoding
set ttyfast             " we have a fast terminal
set nobackup            " no backup files
set nowritebackup       " no backup file while editing
set noswapfile          " no swap filewatch for file changes by other programss
set modelines=0         " don't care about modeline
set viminfo=            " don't use or save viminfo files
set fileformats=unix,mac,dos    " support all three newline formats

" }}}

" {{{ User Interface

set timeoutlen=350      " time to wait when a part of a maped sequence is typped
set matchtime=3         " tenths of second to show the matching bracket
set nonumber            " don't show line number
set cmdheight=1         " explicitly set the command line height
set showcmd             " show (partial) command in the last line of the screen
set scrolloff=8         " keep at least 5 lines after the cusor when scrolling
set sidescrolloff=10    " (same as above for side scrolling)
set lazyredraw          " only redraw when needed
set nolist              " hide invisible characters
set wrap                " split the line if it is too long
set shortmess=atI       " disable vim welcome message and shorter messages
set wildmenu            " better command line completion menu
set undolevels=1000     " use much levels of undo
set cursorline          " highlight cursor line
set wildmode=list:longest,list,full " `-> better
set wildignore+=*.o,*.so,*.a,*.dylib,*.pyc  " ignore compiled files
set wildignore+=*.zip,*.gz,*.xz             " ignore compressed files
set wildignore+=.*.sw*,*~                   " ignore temporary files

" }}}

" {{{ Text editing && Search behavior
set backspace=2         " fix backspace (on some OS/term)
set cpoptions=ces$      " make the 'cw' and like commands put a $ at the end
set ignorecase          " ignore case when searching
set smartcase           "  `-> except if there is one uppercase character
set incsearch           " show matches as soon as posseble
set hlsearch            " highlight last search matches
set wrapscan            " searches wrap around the end of the file
set diffopt=filler,iwhite " ignore all whitespace and sync
set showmatch           " show the matching bracket when inserting
set completeopt=menu,longest,preview " more autocomplete <Ctrl>-P options
set nostartofline       " leave my cursor position alone!
set foldmethod=manual   " ensure that foldmethod is manual
set virtualedit=block   " allow the cursor to go in to 'invalid' places
set wrap linebreak textwidth=0 " disable autowrap
set history=1000        " increase history size

" disable auto comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" instant escape
if ! has('gui_running')
  set ttimeoutlen=10
  augroup Fastescape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=350
  augroup END
endif

" }}}

" {{{ Indentation / Tabulations

set autoindent          " auto-indentation (most of time override by plugins)
set copyindent          " copy the previous indentation on autoindenting
set expandtab           " insert `shiftwidth` spaces when using <Tab>
set shiftwidth=2        " n spaces when using <Tab>
set softtabstop=2       " n spaces when using <Tab>
set tabstop=2           " n spaces when using <Tab>
set hidden              " when I close a tab, don't remove the buffer

" }}}

" {{{ Convention

" 80 characters line convention
highlight OverLength cterm=underline
match OverLength /\%81v.\+/

" }}}

" {{{ Errors

" turn off error bells 
set noerrorbells
set novisualbell
set t_vb=

" }}}

" {{{ Binds

" easy switch between tabs
nnoremap <silent> <S-h> gT
nnoremap <silent> <S-l> gt

" up and down are more logical with g
nnoremap <silent> j gj
nnoremap <silent> k gk

" center on each search result
nnoremap <silent> n nzz
nnoremap <silent> <S-n> Nzz

" pan resizing
nnoremap <silent> _ <C-w>-
nnoremap <silent> + <C-w>+
nnoremap <silent> < <C-w><
nnoremap <silent> > <C-w>>

" make `^a` move cursor to line beginning (in command line)
cnoremap <C-a> <C-b>

" easily search in command line history with `^r` (zsh-style)
cnoremap <C-r> <esc>q:/

" ^P to up command line (useful history search)
cnoremap <C-S-p> <up>

" move between matching brackets using tab
nnoremap <tab> %
vnoremap <tab> %

" fix undesired behavior
imap <C-R> <nop>

" define leading key
let mapleader = ','

" quickly edit/reload the vimrc file
nnoremap <silent> <leader>ve :e $MYVIMRC<CR>
nnoremap <silent> <leader>vs :source $MYVIMRC<CR>

" hide last search matches
nnoremap <silent> <leader><space> :nohlsearch<CR>

" use `,d` to delete a line without adding it to the yanked stack
nnoremap <silent> <leader>d "_d
vnoremap <silent> <leader>d "_d

" }}}

" {{{ Abbrev

" create/move/close tab
cabbrev tn tabnew
cabbrev tm tabmove
cabbrev tq tabclose

" close buffer
cabbrev bq bdelete

" }}}

" {{{ Plugins extra-configuration

" a.vim
nnoremap <silent> <leader>a :A<CR>

" CtrlP
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc)$|(^|[/\\])\.(hg|git|bzr|svn)($|[/\\])|__init__\.py'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_dotfiles = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 1000
let g:ctrlp_max_depth = 10
nnoremap <silent> <leader>b :CtrlPBuffer<CR>

" easymotion
let g:EasyMotion_leader_key = '<leader>y'
nmap <silent> <leader>w <leader>yw

" html
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" lusty juggler
nmap <silent> <leader>m <leader>lj

" narrowregion
noremap <silent> <leader>r :NarrowRegion<CR>

" neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" nerdcommenter
map <silent> <leader><leader> <leader>c<space>

" nerdtree
let NERDTreeShowHidden = 1 " show hidden files
let NERDTreeWinSize = 40
let NERDTreeMinimalUI = 1
nnoremap <silent> <leader>e :NERDTreeTabsToggle<CR>

" php indent
let g:PHP_vintage_case_default_indent = 1

" powerline
let &runtimepath .= ',' . s:vim_dir . '/bundle/tools/powerline/powerline/bindings/vim'
set noshowmode " hide the duplicate mode in bottom status bar

" supertab
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

" syntastic
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_check_on_wq=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_c_compiler_options = "-Wall -Wextra"
nnoremap <silent> <leader>s :SyntasticCheck<CR>
nnoremap <silent> <leader>S :SyntasticToggleMode<CR>

" tagbar
let g:tagbar_autofocus = 1
let g:tagbar_show_visibility = 1 " show private/protected/public
let g:tagbar_compact = 1
nnoremap <silent> <leader>t :TagbarToggle<CR>

" }}}
