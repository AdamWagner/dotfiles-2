################################################################################
# Generic

snippet app "apply()"
${2:method}.apply(${1:context}${3:, $4});$0
endsnippet

snippet cal "call()"
${2:method}.call(${1:context}${3:, $4});$0
endsnippet

snippet cd "console.debug()" b
console.debug(${1:'$2'});$0
endsnippet

snippet ce "console.error()" b
console.error(${1:'$2'});$0
endsnippet

snippet cl "console.log()" b
console.log(${1:'$2'});$0
endsnippet

snippet cw "console.warn()" b
console.warn(${1:'$2'});$0
endsnippet

snippet fe "forEach()"
${1:arr}.forEach(function(${2:value}${3:, ${4:index}${5:, ${6:array}}}) {$0
});
endsnippet

snippet fi "for in"
var $1, $3;
for (${1:key} in ${2:obj}) {
	if (Object.prototype.hasOwnProperty.call($2, $1)) {
		${3:value} = $2[$1];$0
	}
}
endsnippet

snippet fn "function" i
function${1: name}(${2:args}) {$0
}
endsnippet

snippet pr "Add a property to an object prototype" b
${1:obj}.prototype.${2:property} = ${3:value};$0
endsnippet

snippet aps "Array.prototype.slice()"
Array.prototype.slice(${1:object}${2:, ${3:start${4:, end${5:}}}})$0
endsnippet

snippet ok "Object.keys()" i
Object.keys(${1:obj})
endsnippet

snippet oph "Object.prototype.hasOwnProperty()" i
Object.prototype.hasOwnProperty.call(${1:obj}, ${2:key})$0
endsnippet

snippet us "'use strict';" b
'use strict';$0
endsnippet

snippet v "Declare a variable" b
var ${1:name} = ${2:value};$0
endsnippet

snippet vc "Declare a const variable" b
const ${1:name} = ${2:value};$0
endsnippet

snippet vl "Declare a local variable" b
local ${1:name} = ${2:value};$0
endsnippet

snippet todo "Add a TODO comment" i
// TODO(aymeric): ${1:we should...}$0
endsnippet

snippet w "Insert a wrapper" b
;(function(undefined) {

	${VISUAL}$0

})();
endsnippet


################################################################################
# Node.js

snippet me "module.exports" b
module.exports = ${1:export};$0
endsnippet

snippet req "require()" b
var ${1:module} = require('${2:${1/([a-z]+)([A-Z])?/$1(?2:-\l$2)/g}}');$0
endsnippet

snippet greq "require('gulp-*')" b
var ${1:module} = require('${2:gulp-${1/([a-z]+)([A-Z])?/$1(?2:-\l$2)/g}}');$0
endsnippet


################################################################################
# Testing

snippet be "beforeEach()" b
beforeEach(function() {$0
});
endsnippet

snippet ae "afterEach()" b
afterEach(function() {$0
});
endsnippet

snippet des "describe()" b
describe('${1:what you are testing}', function() {

	${VISUAL}$0

});
endsnippet

snippet it "it()" b
it('should ${1:do this...}', function(${2:done}) {$0
});
endsnippet


################################################################################
# JSDoc

snippet j "JSDoc bloc" b
/**
 * ${0:What/Why}
 */
endsnippet

snippet jc "JSDoc @const"
@const${1: {${2:type}}}
endsnippet

snippet jt "JSDoc @type"
@type {${1:type}}
endsnippet

snippet jth "JSDoc @throws"
@throws {${1:ExceptionName}}${2:, ${3:Description}}$0
endsnippet

snippet jp "JSDoc @param"
@param {${1:Type}} ${2:name}${3: - ${4:Description}}$0
endsnippet

snippet jr "JSDoc @return"
@return {${1:Type}}${2: - ${3:Description}}$0
endsnippet


################################################################################
# Angular

snippet aw "Insert a wrapper passing the angular var" b
;(function(angular, undefined) {

  ${VISUAL}$0

})(angular);
endsnippet

snippet amodule "Angular module" b
angular.module('${1:name}', [$2]);$0
endsnippet

snippet aconstant "Angular constant" b
/** @const */
var $2 = ${3:value};$0

angular.module('${1:app}')
	.constant(${2:myConst}, $2);
endsnippet

snippet aconfig "Angular config" b
function $2($3) {$0
}

angular.module('${1:app}')
	.config(${2:config})
;
endsnippet

snippet acontroller "Angular controller" b
function $2Controller($3) {$0
}

angular.module('${1:app}')
	.controller('${2:My}Controller', $2Controller);
endsnippet

snippet adirective "Angular directive" b
function $2($3) {
	return {${4:
		restrict: '${5:AEC}',}${6:
		scope: {
		},}
		link: function(${7:scope${8:, element${9:, attrs}}}) {$0
		}
	};
}

angular.module('${1:app}')
	.directive('${2:myDirective}', $2);
endsnippet

snippet afactory "Angular factory" b
function $2Factory($3) {$0
}

angular.module('${1:app}')
	.factory(${2:my}Factory, $2Factory);
endsnippet

snippet afilter "Angular filter" b
function $2($3) {
	return function(input${4:, args...}}) {$0
		return input;
	};
}

angular.module('${1:app}')
	.filter('${2:myFilter}', $2);
endsnippet

snippet aservice "Angular service" b
function $2($3) {$0
}

angular.module('${1:app}')
	.service('${2:myService}', $2);
endsnippet

snippet avalue "Angular value" b
var $2 = ${3:value};

angular.module('${1:app}')
	.value(${2:myValue}, $2);
endsnippet


################################################################################
# Lodash

snippet lfe "Lodash.forEach()" b
_.forEach(${1:collection}, function(${2:value${3:, index${5:, collection}}}) {$0
}${6:, this});
endsnippet

snippet lmr "Lodash.map() -> Lodash.reduce()"
_.reduce(_.map(${1:collection},

	function map(${2:${3:value}${4:, ${5:index}${6:, ${7:collection}}}}) {$22
	}${8:, ${9:this}}),

	function reduce(${10:${11:acc}${12:, ${13:value}${14:, ${15:index}${16:, ${17:collection}}}}}) {$0
	}${18:, ${19:[]}${20:, ${21:this}}}

)
endsnippet
