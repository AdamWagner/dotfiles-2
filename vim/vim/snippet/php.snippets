# Define

snippet def "define" !b
define('${0}');
endsnippet

# Include

snippet inc "include a file" !b
include '${0}'
endsnippet

snippet oinc "include a file once" !b
include_once '${0}'
endsnippet

# Control flow

snippet if "if" !b
if (${1:/* condition */})
{
    ${2:// code...}
}
$0
endsnippet

snippet sif "short if" !b
if (${1:CONDITION})
	${0:// code...}
endsnippet

snippet elif "elseif" !b
elseif (${1:/* condition */})
{
    ${2:// code...}
}
$0
endsnippet

snippet selif "short else if" !b
elseif (${1:CONDITION})
	${2:// code...}
$0
endsnippet

snippet else "else" !b
else
{
    ${0:// code...}
}
endsnippet

snippet selse "short else" !b
else
	${0:// code...}
endsnippet

snippet while "while loop" !b
while (${1:CONDITION})
{
    ${0:// code...}
}
endsnippet

snippet for "for loop" !b
for ($${1:i} = 0; $$1 < ${2:COUNT}; $$1${3:++})
{
    ${0:// code...}
}
endsnippet

snippet fore "foreach loop" !b
foreach ($1 as $value)
{
	${0:// code...}
}
endsnippet

snippet forek "foreach loop" !b
foreach (${1:CONTENT} as $key => $value)
{
	${0:// code...}
}
endsnippet

# POO

snippet class "Class template" !b
class ${1:CLASSNAME}
{
	${0}
}
endsnippet

# Various

snippet debug "print a variable and exit 42" !b
echo '<pre>';
var_dump($0);
echo '</pre>';
exit(42);
endsnippet

# :vim:ft=snippets:
