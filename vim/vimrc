" Author: Aymeric Beaumet <aymeric@beaumet.me>
" Github: @abeaumet/dotfiles
"
" Content:
"   1. Global options                            *vimrc-options*
"   2. User Interface                            *vimrc-ui*
"   3. Search & Replace behavior                 *vimrc-search*
"   4. Text editing                              *vimrc-edition*
"   5. Indentation / Tabulations                 *vimrc-indent-tab*
"   6. Errors                                    *vimrc-errors*
"   7. Binds & Alias                             *vimrc-binds-alias*
"   8. Languages specific configuration          *vimrc-languages*
"   9. Plugins                                   *vimrc-plugins*
"     9.1. NeoBundle initialization                *vimrc-plugins-neobundle*
"     9.2. Themes plugins                          *vimrc-plugins-themes*
"     9.3. Languages specific plugins              *vimrc-plugins-languages*
"     9.4. Tools plugins                           *vimrc-plugins-tools*
"   10. File type / Syntax detection             *vimrc-filetype*
"   11. Helpers                                  *vimrc-helpers*



" break away from old vi compatibility
set nocompatible

" clear autocommands of the default group
au!



" {{{ 1. Global options                                          *vimrc-options*

set shell=zsh           " shell for :sh
set autoread            " watch for file changes by other programs
set autowrite           " automatically save before :next and :make
set encoding=utf-8      " ensure proper encoding
set ttyfast             " we have a fast terminal
set modeline            " enable modelines
set modelines=3         " consider the first/last three lines
set fileformats=unix,mac,dos " support all three newline formats
set tags=tags;/         " define tags file path
set sessionoptions-=options " do not store options in session file
set sessionoptions-=folds   " do not store folds in session file

set noswapfile          " disable swap files

set backup              " enable backup files
set backupdir=~/.vim/tmp/backup// " backup files directory
au VimEnter * call CreateDirectory(&backupdir)

set undofile            " enable undo files
set undolevels=1000     " number of undo level
set undoreload=10000    " number of lines to save for undo
set undodir=~/.vim/tmp/undo// " undo files directory
au VimEnter * call CreateDirectory(&undodir)

let g:sessionfile='~/.vim/tmp/session.vim' " session file

" }}}



" {{{ 2. User Interface                                               *vimrc-ui*

set timeoutlen=500      " time to wait when a part of a maped sequence is typped
set ttimeoutlen=0       " instant insert mode exit using escape
set matchtime=3         " tenths of second to show the matching bracket
set cmdheight=1         " explicitly set the command line height
set showcmd             " show (partial) command in the last line of the screen
set lazyredraw          " only redraw when needed
set shortmess=aoOsI     " disable vim welcome message / enable shorter messages
set cursorline          " highlight cursor line
set wildmenu            " better command line completion menu
set wildmode=full       "  `-> ensure default completion
set wildignore+=*.o,*.so,*.a,*.dylib,*.pyc  " ignore compiled files
set wildignore+=*.zip,*.gz,*.xz,*.tar       " ignore compressed files
set wildignore+=.*.sw*,*~                   " ignore temporary files
set tabpagemax=100      " allow lots of tabs
set hidden              " when a tab is closed, do not delete the buffer
set laststatus=2        " always display status line
set t_Co=256            " 256 colors
set splitbelow          " split horizontally below

au VimEnter * hi CursorLine cterm=bold " highlight cursor line
au VimEnter * NeoBundleSource wombat256.vim " choose theme

set relativenumber      " relative line numerotation by default
au InsertEnter * set norelativenumber number " classic in insert mode
au InsertLeave * set nonumber relativenumber " relative out of insert mode

  " }}}



" {{{ 3. Search & Replace behavior                                *vimrc-search*

set ignorecase          " ignore case when searching
set smartcase           "  `-> except if there is one uppercase character
set incsearch           " show matches as soon as possible
set wrapscan            " searches wrap around the end of the file
set showmatch           " show the matching bracket when inserting
set gdefault            " default substitute g flag

au VimEnter * set hlsearch " highlight last search matches (only on vim startup)
au InsertEnter * setlocal nohlsearch " disable search highlighting in insert mode
au InsertLeave * setlocal hlsearch " ... ands re-enable when leaving

" }}}



" {{{ 4. Text editing                                            *vimrc-edition*

set backspace=2         " fix backspace (on some OS/term)
set nostartofline       " leave my cursor position alone!
set foldmethod=manual   " ensure that foldmethod is manual
set virtualedit=block   " allow the cursor to go in to 'invalid' places
set history=1000        " increase history size
set selection=inclusive " cursor is in selection
set scrolloff=8         " keep at least 8 lines after the cusor when scrolling
set sidescrolloff=10    " (same as above about columns during side scrolling)
set nolist              " hide invisible characters
set textwidth=80        " 80 characters line
set wrap                " wrap long lines

" spell checker
set nospell             " Disable spell language globally
set spelllang=en        " configure spell language
set spellfile=~/.vim/spell/en.utf-8.add " specify spell file
augroup spell_highlight
  au!
  au VimEnter * hi clear SpellBad
  au VimEnter * hi clear SpellCap
  au VimEnter * hi clear SpellLocal
  au VimEnter * hi clear SpellRare
  au VimEnter * hi SpellBad cterm=underline
  au VimEnter * hi SpellCap cterm=underline
  au VimEnter * hi SpellLocal cterm=underline
  au VimEnter * hi SpellRare cterm=underline
augroup END

" format option stuff (see :help fo-table)
set formatoptions=cro
silent! set formatoptions+=j " not compatible with all vim versions

" Highlight trailing whitespaces
au VimEnter * hi TrailingWhitespace ctermbg=darkyellow |
  \ match TrailingWhitespace /\s\+$/

" remember last position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
  \ exe "normal g'\"" | endif

" }}}



" {{{ 5. Indentation / Tabulations                            *vimrc-indent-tab*

set autoindent          " auto-indentation
set smarttab            " insert shiftwidth spaces instead of tabs
set expandtab           " replace tabs by spaces
set shiftwidth=2  " n spaces when using <Tab>
set softtabstop=2 " n spaces when using <Tab>
set tabstop=2     " n spaces when using <Tab>

" }}}



" {{{ 6. Errors                                                   *vimrc-errors*

" turn off error bells
set noerrorbells
set novisualbell
set t_vb=

" }}}



" {{{ 7. Binds & Alias                                       *vimrc-binds-alias*

" easy navigation between tabs
nnoremap <silent> <S-H> gT
nnoremap <silent> <S-L> gt

" up and down are more logical with g
nnoremap <silent> j gj
vnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> k gk

" define leading key
let g:mapleader = '\'
let mapleader = '\'

" hide last search matches
nnoremap <silent> <Space> :nohlsearch<CR>

" use `\d`  `\D` `\x` `\X` to delete without altering the yanked stack
nnoremap <silent> <Leader>d "_d
vnoremap <silent> <Leader>d "_d
nnoremap <silent> <Leader>D "_D
vnoremap <silent> <Leader>D "_D
nnoremap <silent> <Leader>x "_x
vnoremap <silent> <Leader>x "_x
nnoremap <silent> <Leader>X "_X
vnoremap <silent> <Leader>X "_X

" copy from the cursor to the end of line using Y
nnoremap <silent> Y y$

" man key on M
nnoremap <silent> M K

" keep the cursor in place while joining lines
nnoremap <silent> J myJ`y

" split line with K
nnoremap <silent> K i<CR><Esc>^mzgk:silent! s/\v +$//<CR>:nohlsearch<CR>`z

" insert blank lines without entering insert mode (do not alter any register)
nnoremap <silent> gO O<esc>0"_D
nnoremap <silent> go o<esc>0"_D

" disable annoying keys
noremap <silent> <F1> <Nop>
inoremap <silent> <F1> <Nop>
noremap <silent> Q <Nop>
noremap <silent> ZZ <Nop>
noremap <silent> ZQ <Nop>

" bind `jj` to leave insert/op/command mode
inoremap <silent> jj <C-C>

" useful insert mode binds
inoremap <silent> II <C-O>0
inoremap <silent> AA <C-O>$
inoremap <silent> CC <C-O>"_D
inoremap <silent> OO <C-C>O
inoremap <silent> <C-O><C-O> <C-C>o
inoremap <silent> JJ <C-O>J

" buffer
nnoremap <silent> <leader>bq :bdelete<CR>

" tab
nnoremap <leader>tc :tabnew<CR>
nnoremap <leader>tq :tabclose<CR>
cnoreabbrev <expr> tm ((getcmdtype() is# ':' && getcmdline() is# 'tm')?('tabmove'):('tm'))

" delete whitespaces
nnoremap <leader>dw :call <SID>StripTrailingWhitespaces()<CR>

" git alias (very convenient when you're used to it in shell)
cnoreabbrev <expr> g ((getcmdtype() is# ':' && getcmdline() is# 'g')?('Git'):('g'))

" save/load session
nnoremap <leader>ss :mksession! <C-R>=g:sessionfile<CR><CR>
nnoremap <leader>sl :source <C-R>=g:sessionfile<CR><CR>

" command line useful binds
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>

" disable completion popup while using ^e and ^y in insert mode
inoremap <expr> <C-E> pumvisible() ? "\<C-Y>\<C-E>" : "\<C-E>"
inoremap <expr> <C-Y> pumvisible() ? "\<C-Y>\<C-Y>" : "\<C-Y>"

" }}}



" {{{ 8. Languages specific configuration                      *vimrc-languages*

" C/CPP
au FileType c,cpp call LoadCConfiguration()
function! LoadCConfiguration()
  setl omnifunc=ccomplete#Complete
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" CSS
au FileType css call LoadCSSConfiguration()
function! LoadCSSConfiguration()
  setl omnifunc=csscomplete#CompleteCSS
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
  setl iskeyword+=-
endfunction

" Git commit
au FileType gitcommit call LoadGitCommitConfiguration()
function! LoadGitCommitConfiguration()
  setl spell
endfunction

" JavaScript
au FileType javascript call LoadJavaScriptConfiguration()
function! LoadJavaScriptConfiguration()
  setl omnifunc=javascriptcomplete#CompleteJS
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" HTML
au FileType html call LoadHTMLConfiguration()
function! LoadHTMLConfiguration()
  setl omnifunc=htmlcomplete#CompleteTags
  setl iskeyword+=-
endfunction

" Markdown
au FileType markdown call LoadMarkdownConfiguration()
function! LoadMarkdownConfiguration()
  setl omnifunc=htmlcomplete#CompleteTags
  setl formatoptions=tcroqn2 comments=n:>
  setl spell
endfunction

" PHP
au FileType php call LoadPHPConfiguration()
function! LoadPHPConfiguration()
  setl omnifunc=phpcomplete#CompletePHP
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
  setl iskeyword-=$
endfunction

" Python
au FileType python call LoadPythonConfiguration()
function! LoadPythonConfiguration()
  setl omnifunc=pythoncomplete#Complete
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" XML
au FileType xml call LoadXMLConfiguration()
function! LoadXMLConfiguration()
  setl omnifunc=xmlcomplete#CompleteTags
endfunction

" }}}



" {{{ 9. Plugins                                                 *vimrc-plugins*

" found vim config file and config dir
let s:vim_conf = expand('<sfile>:p')
let s:vim_dir = fnamemodify(s:vim_conf, ':h') . '/.vim'

let &runtimepath .= ',' . s:vim_dir . '/bundle/neobundle.vim'
if (exists("g:bundle_dir"))
  call neobundle#rc(g:bundle_dir) " load NeoBundle
else
  call neobundle#rc() " load NeoBundle
endif


"""""""""""""""""""""""""""""                          *vimrc-plugins-neobundle*
" 9.1. Load NeoBundle first "
"""""""""""""""""""""""""""""

NeoBundleFetch 'Shougo/neobundle.vim', {
  \     'depends': [
  \         [
  \             'Shougo/vimproc.vim', {
  \                 'build' : {
  \                     'windows' : 'make -f make_mingw32.mak',
  \                     'cygwin' : 'make -f make_cygwin.mak',
  \                     'mac' : 'make -f make_mac.mak',
  \                     'unix' : 'make -f make_unix.mak',
  \                 },
  \             }
  \         ]
  \     ]
  \ }


"""""""""""""""                                           *vimrc-plugins-themes*
" 9.2. Themes "
"""""""""""""""

" Only one of the following themes will be loaded (using `NeoBundleSource`)

NeoBundleLazy 'Mustang2'
let bundle = neobundle#get('Mustang2')
function! bundle.hooks.on_post_source(bundle)
  set background=dark
  colorscheme mustang
endfunction

NeoBundleLazy 'http://blog.toddwerth.com/entry_files/8/ir_black.vim', {
  \     'name': 'ir_black.vim',
  \     'script_type': 'colors',
  \ }
let bundle = neobundle#get('ir_black.vim')
function! bundle.hooks.on_post_source(bundle)
  set background=dark
  colorscheme irblack
endfunction

NeoBundleLazy 'wombat256.vim'
let bundle = neobundle#get('wombat256.vim')
function! bundle.hooks.on_post_source(bundle)
  set background=dark
  colorscheme wombat256mod
endfunction


""""""""""""""""""                                     *vimrc-plugins-languages*
" 9.3. Languages "
""""""""""""""""""

" CSS

NeoBundleLazy 'Better-CSS-Syntax-for-Vim', {
  \     'autoload': {
  \         'filetypes': ['css']
  \     }
  \ }

" CPP

NeoBundleLazy 'google.vim', {
  \     'autoload': {
  \         'filetypes': ['cpp']
  \     }
  \ }

" Git

NeoBundle 'tpope/vim-git'

" HTML

NeoBundleLazy 'othree/html5.vim', {
  \     'autoload': {
  \         'filetypes': ['html', 'markdown']
  \     }
  \ }

" Javascript

NeoBundleLazy 'pangloss/vim-javascript', {
  \     'autoload': {
  \         'filetypes': ['html', 'javascript']
  \     }
  \ }

" Markdown

NeoBundle 'tpope/vim-markdown'

" PHP

let g:PHP_vintage_case_default_indent = 1 " change indentation
NeoBundleLazy '2072/PHP-Indenting-for-VIm', {
  \     'autoload': {
  \         'filetypes': ['php']
  \     }
  \ }

NeoBundleLazy 'phpcomplete.vim', {
  \     'autoload': {
  \         'filetypes': ['php']
  \     }
  \ }


""""""""""""""                                             *vimrc-plugins-tools*
" 9.4. Tools "
""""""""""""""

" ---  a.vim
NeoBundleLazy 'a.vim', {
  \     'autoload': {
  \         'filetypes': ['c', 'cpp']
  \     }
  \ }

" ---  HTML-AutoCloseTag
NeoBundleLazy 'HTML-AutoCloseTag', {
  \     'autoload': {
  \         'filetypes': ['html', 'markdown', 'xml']
  \     }
  \ }

" ---  Zen Coding
let g:user_zen_leader_key = '<C-E>'
let g:user_zen_mode = 'a' " enable all function in all mode
NeoBundleLazy 'mattn/zencoding-vim', {
  \     'autoload': {
  \         'filetypes': ['html', 'xml']
  \     }
  \ }

" ---  Powerline
NeoBundle 'Lokaltog/powerline', {
  \     'rtp': 'powerline/bindings/vim/',
  \     'external_commands': ['python'],
  \ }
let bundle = neobundle#get('powerline')
function! bundle.hooks.on_post_source(bundle)
  set noshowmode " hide the duplicate mode in bottom status bar
endfunction

" ---  Easymotion
let bundle = neobundle#get('vim-easymotion')
let g:EasyMotion_leader_key = '<Leader><Leader>'
NeoBundle 'Lokaltog/vim-easymotion'

" ---  UltiSnips
let g:UltiSnipsSnippetDirectories = ['snippet'] " Use only my snippets
let g:UltiSnipsDontReverseSearchPath = 1 " Browse runtimepath in standard order
let g:UltiSnipsExpandTrigger = '<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
NeoBundle 'SirVer/ultisnips'

" ---  YouCompleteMe
let g:ycm_complete_in_comments = 1 " show completion in comments
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " explicit...
let g:ycm_collect_identifiers_from_tags_files = 1 " use tag files if needed
let g:ycm_seed_identifiers_with_syntax = 1 " take care of language syntax
let g:ycm_add_preview_to_completeopt = 1 " more complete completion popup
let g:ycm_autoclose_preview_window_after_completion = 0 " autoclose popup
let g:ycm_autoclose_preview_window_after_insertion = 1  " autoclose popup
let g:ycm_key_list_select_completion = ['<C-N>'] " previous completion
let g:ycm_key_list_previous_completion = ['<C-P>'] " next completion
let g:ycm_cache_omnifunc = 0 " disable omnifunc cache
NeoBundle 'Valloric/YouCompleteMe', {
  \     'build': {
  \         'unix': './install.sh --clang-completer',
  \         'mac': './install.sh --clang-completer',
  \     },
  \     'vim_version': '7.3.584',
  \     'external_commands': ['python'],
  \ }

" ---  Ack
let g:ack_autoclose = 1 " automatically close the quickfix window
NeoBundle 'abeaumet/ack.vim', {
  \     'external_commands': ['ack']
  \ }

" ---  Vim Rooter
NeoBundle 'airblade/vim-rooter'

" ---  Narrow Region
let g:nrrw_rgn_nohl = 1 " disable highlighting while isolating code
NeoBundle 'chrisbra/NrrwRgn'
let bundle = neobundle#get('NrrwRgn')
function! bundle.hooks.on_post_source(bundle)
  noremap <silent> <Leader>r :NarrowRegion<CR>
endfunction

" ---  Tabular
NeoBundle 'godlygeek/tabular'
let bundle = neobundle#get('tabular')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>a :Tabularize /
  vnoremap <silent> <Leader>a :Tabularize /
endfunction

" ---  Gundo
let g:gundo_width = 40 " gundo pane width
let g:gundo_preview_height = 20 " preview height
let g:gundo_preview_bottom = 1 " preview on bottom of file
let g:gundo_help = 0 " disable help in gundo pane
let g:gundo_close_on_revert = 1 " automatically close the gundo pane on revert
NeoBundle 'bitbucket:sjl/gundo.vim'
let bundle = neobundle#get('gundo.vim')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <Leader>ue :GundoToggle<CR>
endfunction

" ---  Buffergator
let g:buffergator_suppress_keymaps = 1 " delete default keymaps
let g:buffergator_viewport_split_policy = 'L' " split on the left of the screen
NeoBundle 'jeetsukumaran/vim-buffergator'
let bundle = neobundle#get('vim-buffergator')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>be :BuffergatorToggle<CR>
endfunction

" ---  Winresizer
let g:winresizer_start_key = '<C-W><C-W>'
NeoBundle 'jimsei/winresizer'

" ---  CtrlP
let g:ctrlp_map = '<Leader>fo'
let g:ctrlp_custom_ignore = {
  \     'dir':  '\v[\/]\.(git|hg|svn)$'
  \ } " will be ignored in completion (`wildignore` is applied first)
let g:ctrlp_working_path_mode = 'ra' " search root is the nearest SCM
let g:ctrlp_max_files = 1000 " avoid lag if launched in a high level directory
let g:ctrlp_max_depth = 10 " same as above
let g:ctrlp_clear_cache_on_exit = 0 " keep cache across sessions
let g:ctrlp_show_hidden = 1 " search for hidden files
let g:ctrlp_follow_symlinks = 1 " follow symlinks (but prevent infinite loops)
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files -co'] " .git faster
let g:ctrlp_switch_buffer = 't' " switch to any buffer in any tab
NeoBundle 'kien/ctrlp.vim'
let bundle = neobundle#get('ctrlp.vim')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>fr :CtrlPMRU<CR>
  nnoremap <silent> <Leader>bo :CtrlPBuffer<CR>
endfunction

" ---  Tagbar
let g:tagbar_autofocus = 1 " focus tagbar when opened
let g:tagbar_autoclose = 1 " close tagbar when opening a tag
let g:tagbar_show_visibility = 1 " show public/private/protected
let g:tagbar_compact = 1 " hide superfluous stuff
let g:tagbar_width = 40 " set tagbar width
let g:tagbar_left = 1 " set tagbar pane on the left side
NeoBundle 'majutsushi/tagbar'
let bundle = neobundle#get('tagbar')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>te :TagbarToggle<CR>
endfunction

" ---  MatchIt
NeoBundle 'matchit.zip'

" ---  Vim Visual Star Search
NeoBundle 'nelstrom/vim-visual-star-search'

" ---  Nerd Commenter
NeoBundle 'scrooloose/nerdcommenter'

" ---  Nerd Tree
let g:NERDTreeShowHidden = 1 " show hidden files
let g:NERDTreeQuitOnOpen = 1 " close tree when opening a file
let g:NERDTreeWinSize = 40 " tree width
let g:NERDTreeMinimalUI = 1 " hide superfluous stuff
NeoBundle 'scrooloose/nerdtree'
let bundle = neobundle#get('nerdtree')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>fe :NERDTreeToggle<CR>
endfunction

" ---  Syntastic
let g:syntastic_mode_map = {
  \     'mode': 'passive'
  \ }
let g:syntastic_check_on_wq = 0 " disable on save
let g:syntastic_always_populate_loc_list = 1 " stick any errors in the loclist
let g:syntastic_auto_loc_list = 1 " open loclist on error / else close it
let g:syntastic_c_compiler_options = "-Wall -Wextra"
let g:syntastic_cpp_checkers = [
  \     'cpplint'
  \ ]
NeoBundle 'scrooloose/syntastic'
let bundle = neobundle#get('syntastic')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>sc :SyntasticCheck<CR>
  nnoremap <silent> <Leader>st :SyntasticToggleMode<CR>
endfunction

" ---  Multiple Cursors
NeoBundle 'terryma/vim-multiple-cursors'
let bundle = neobundle#get('vim-multiple-cursors')
function! bundle.hooks.on_post_source(bundle)
  vnoremap <silent> <Leader>mc :MultipleCursorsFind<Space>
endfunction

" ---  Abolish
NeoBundle 'tpope/vim-abolish'

" ---  Eunuch
NeoBundle 'tpope/vim-eunuch'

" ---  Fugitive
NeoBundle 'tpope/vim-fugitive', {
  \     'external_commands': ['git']
  \ }
let bundle = neobundle#get('vim-fugitive')
function! bundle.hooks.on_post_source(bundle)
  " Ensure that the buffers do not pollute the buffers list
  au BufReadPost fugitive://* setl bufhidden=delete
endfunction

" ---  Repeat
NeoBundle 'tpope/vim-repeat'

" ---  Speed Dating
NeoBundle 'tpope/vim-speeddating'

" ---  Surround
NeoBundle 'tpope/vim-surround'

" ---  Unimpaired
NeoBundle 'tpope/vim-unimpaired'

" ---  Easytags
"let g:easytags_by_filetype = 1 " separate tag files for each languages
let g:easytags_include_members = 1 " more complete tag files for C++ and Java
let g:easytags_resolve_links = 1 " follow symlinks
let g:easytags_python_enabled = 1 " use Python for faster syntax highlighting
let g:easytags_updatetime_warn = 0 " never warn about fast updatetime
NeoBundle 'xolox/vim-easytags', {
  \     'depends': [
  \         'xolox/vim-misc'
  \     ]
  \ }

" ---  Indexed Search
let g:indexed_search_center_on_result = 1 " center on search result
NeoBundle 'abeaumet/IndexedSearch'

" ---  Match Tag
NeoBundleLazy 'gregsexton/MatchTag', {
  \     'autoload': {
  \         'filetypes': ['html', 'xml']
  \     }
  \ }


" Install bundles && generate/check documentation
NeoBundleCheck

" }}}



" {{{ 10. File type / Syntax detection                          *vimrc-filetype*

syntax enable
filetype plugin indent on

" }}}



" {{{ 11. Helpers                                                *vimrc-helpers*

" https://github.com/EOL/cukestone/wiki/Vim-cleaning-trailing-whitespaces
" Clean all the trailing whitespaces in the current buffer
function! StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction


" Create the given directory
function! CreateDirectory(directory_name)
  silent! call mkdir(expand(a:directory_name))
endfunction

" }}}



set secure " avoid ~/.{vimrc,exrc} modification by autocmd, shell and write

" vim: isk+=- isk+=*
