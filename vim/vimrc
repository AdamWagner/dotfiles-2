" Author: Aymeric Beaumet <aymeric@beaumet.me>
" Github: @abeaumet/dotfiles
"
" Content:
"   1. Helpers                                   *vimrc-helpers*
"   2. Global options                            *vimrc-options*
"   3. User Interface                            *vimrc-ui*
"   4. Search & Replace behavior                 *vimrc-search*
"   5. Text editing                              *vimrc-edition*
"   6. Indentation / Tabulations                 *vimrc-indent-tab*
"   7. Errors                                    *vimrc-errors*
"   8. Binds & Alias                             *vimrc-binds-alias*
"   9. Languages specific configuration          *vimrc-languages*
"  10. Plugins                                   *vimrc-plugins*
"     10.1. NeoBundle                               *vimrc-plugins-neobundle*
"     10.2. Themes                                  *vimrc-plugins-themes*
"     10.3. Languages specific plugins              *vimrc-plugins-languages*
"     10.4. Tools plugins                           *vimrc-plugins-tools*
"  11. File type / Syntax detection              *vimrc-filetype*



" break away from old vi compatibility
set nocompatible

" clear autocommands of the default group
au!



" {{{ 1. Helpers                                                 *vimrc-helpers*

" https://github.com/EOL/cukestone/wiki/Vim-cleaning-trailing-whitespaces
" Clean all the trailing whitespaces in the current buffer
function! StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Create directory
function! CreateDirectory(directory_name)
  silent! call mkdir(expand(a:directory_name), "p", 0755)
endfunction

" Detect Linux
function! IsLinux()
  return has("unix") &&
        \  substitute(system("uname -s"), '\n', '', '') ==# 'Linux'
endfunction

" Detect OSX
function! IsOSX()
  return has("unix") &&
        \ substitute(system("uname -s"), '\n', '', '') ==# 'Darwin'
endfunction

" }}}



" {{{ 2. Global options                                          *vimrc-options*

set shell=zsh           " shell for :sh
set autoread            " watch for file changes by other programs
set autowrite           " automatically save before :next and :make
set encoding=utf-8      " ensure proper encoding
set ttyfast             " we have a fast terminal
set modeline            " enable modelines
set modelines=3         " consider the first/last three lines
set fileformats=unix,mac,dos " support all three newline formats
set tags=~/.vim/tmp/tags/* " define tags file path
set history=1000        " increase history size

set noswapfile          " disable swap files

set backup              " enable backup files
set backupdir=~/.vim/tmp/backup// " backup files directory
au VimEnter * call CreateDirectory(&backupdir)

if has("persistent_undo")
  set undofile            " enable undo files
  set undolevels=1000     " number of undo level
  set undoreload=10000    " number of lines to save for undo
  set undodir=~/.vim/tmp/undo// " undo files directory
  au VimEnter * call CreateDirectory(&undodir)
endif

" }}}



" {{{ 3. User Interface                                               *vimrc-ui*

set timeoutlen=500      " time to wait when a part of a maped sequence is typped
set ttimeoutlen=0       " instant insert mode exit using escape
set matchtime=3         " tenths of second to show the matching bracket
set cmdheight=1         " explicitly set the command line height
set showcmd             " show (partial) command in the last line of the screen
set lazyredraw          " only redraw when needed
set shortmess=aoOsI     " disable vim welcome message / enable shorter messages
set cursorline          " highlight cursor line
set wildmenu            " better command line completion menu
set wildmode=full       "  `-> ensure default completion
set wildignore+=*.o,*.so,*.a,*.dylib,*.pyc  " ignore compiled files
set wildignore+=*.zip,*.gz,*.xz,*.tar       " ignore compressed files
set wildignore+=.*.sw*,*~                   " ignore temporary files
set tabpagemax=15       " limit number of tabs
set hidden              " when a tab is closed, do not delete the buffer
set laststatus=2        " always display status line
set t_Co=256            " 256 colors
set mouse=a             " enable mouse support
set background=dark     " dark background

au VimEnter * hi CursorLine cterm=bold " highlight cursor line

set relativenumber      " relative line numerotation by default
au InsertEnter * set norelativenumber number " classic in insert mode
au InsertLeave * set nonumber relativenumber " relative out of insert mode

" }}}



" {{{ 4. Search & Replace behavior                                *vimrc-search*

set ignorecase          " ignore case when searching
set smartcase           "  `-> except if there is one uppercase character
set incsearch           " show matches as soon as possible
set wrapscan            " searches wrap around the end of the file
set showmatch           " show the matching bracket when inserting
set gdefault            " default substitute g flag

au VimEnter * set hlsearch " highlight last search matches (only on vim startup)
au InsertEnter * setlocal nohlsearch " hide search highlighting in insert mode
au InsertLeave * setlocal hlsearch " ... ands re-enable when leaving

" }}}



" {{{ 5. Text editing                                            *vimrc-edition*

set backspace=2         " fix backspace (on some OS/term)
set nostartofline       " leave my cursor position alone!
set foldmethod=manual   " ensure that foldmethod is manual
set virtualedit=block   " allow the cursor to go in to 'invalid' places
set selection=inclusive " cursor is in selection
set scrolloff=8         " keep at least 8 lines after the cusor when scrolling
set sidescrolloff=10    " (same as above about columns during side scrolling)
set nolist              " hide invisible characters
set textwidth=80        " 80 characters line
set wrap                " wrap long lines

" spell checker
set nospell             " Disable spell language globally
set spelllang=en        " configure spell language
set spellfile=~/.vim/spell/en.utf-8.add " specify spell file

" format option stuff (see :help fo-table)
set formatoptions=cro
silent! set formatoptions+=j " not compatible with all vim versions

" remember last position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") |
  \ exe 'normal! g`"' | endif

" }}}



" {{{ 6. Indentation / Tabulations                            *vimrc-indent-tab*

set autoindent          " auto-indentation
set smarttab            " insert shiftwidth spaces instead of tabs
set expandtab           " replace tabs by spaces
set shiftwidth=2        " n spaces when using <Tab>
set softtabstop=2       " n spaces when using <Tab>
set tabstop=2           " n spaces when using <Tab>

" }}}



" {{{ 7. Errors                                                   *vimrc-errors*

" turn off error bells
set noerrorbells
set novisualbell
set t_vb=

" }}}



" {{{ 8. Binds & Alias                                       *vimrc-binds-alias*

" easy navigation between tabs
nnoremap <silent> <S-H> gT
nnoremap <silent> <S-L> gt

" up and down are more logical with g
nnoremap <silent> j gj
vnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> k gk

" define leading key
let g:mapleader = '\'
let mapleader = '\'

" hide last search matches
nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
vnoremap <silent> <C-L> <C-C>:nohlsearch<CR><C-L>

" use `\d` `\D` `\x` `\X` to delete without altering the yanked stack
nnoremap <silent> <Leader>d "_d
vnoremap <silent> <Leader>d "_d
nnoremap <silent> <Leader>D "_D
vnoremap <silent> <Leader>D "_D
nnoremap <silent> <Leader>x "_x
vnoremap <silent> <Leader>x "_x
nnoremap <silent> <Leader>X "_X
vnoremap <silent> <Leader>X "_X

" copy from the cursor to the end of line using Y
nnoremap <silent> Y y$

" man key on M
nnoremap <silent> M K

" keep the cursor in place while joining lines
nnoremap <silent> J myJ`y

" split line with K
nnoremap <silent> K i<CR><C-C>^mzgk:silent! s/\v +$//<CR>:nohlsearch<CR>`z

" insert blank lines without entering insert mode (do not alter any register)
nnoremap <silent> gO O<C-C>0"_D
nnoremap <silent> go o<C-C>0"_D

" disable annoying keys
noremap <silent> <F1> <Nop>
inoremap <silent> <F1> <Nop>
noremap <silent> Q <Nop>
noremap <silent> ZZ <Nop>
noremap <silent> ZQ <Nop>
nnoremap <C-C> <Nop>

" bind `jj` to leave insert mode
inoremap <silent> jj <C-C>

" useful insert mode binds
inoremap <silent> II <C-O>^
inoremap <silent> AA <C-O>$
inoremap <silent> CC <C-O>"_D
inoremap <silent> OO <C-C>O
inoremap <silent> <C-O><C-O> <C-C>o
inoremap <silent> JJ <C-O>J

" buffer
cnoreabbrev <expr> bq ((getcmdtype() is# ':' && getcmdline() is# 'bq')?('bdelete'):('bq'))

" tab
nnoremap <leader>tc :tabnew<CR>
nnoremap <leader>tq :tabclose<CR>
cnoreabbrev <expr> tc ((getcmdtype() is# ':' && getcmdline() is# 'tc')?('tabnew'):('tc'))
cnoreabbrev <expr> tm ((getcmdtype() is# ':' && getcmdline() is# 'tm')?('tabmove'):('tm'))

" strip whitespaces
nnoremap <leader>sw :call StripTrailingWhitespaces()<CR>

" git alias
cnoreabbrev <expr> G ((getcmdtype() is# ':' && getcmdline() is# 'G')?('Git'):('G'))

" command line useful binds
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>
cnoremap <C-O> <Up>

" disable completion popup while using ^e and ^y in insert mode
inoremap <expr> <C-E> pumvisible() ? "\<C-Y>\<C-E>" : "\<C-E>"
inoremap <expr> <C-Y> pumvisible() ? "\<C-Y>\<C-Y>" : "\<C-Y>"

" open tag in a new tab
nnoremap <silent> <C-W><C-]> <C-W><C-]><C-W>Tzz

" center on movements
nnoremap <silent> <C-]> <C-]>zz
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" }}}



" {{{ 9. Languages specific configuration                      *vimrc-languages*

" C/CPP
au FileType c,cpp call LoadCConfiguration()
function! LoadCConfiguration()
  setl omnifunc=ccomplete#Complete
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" CSS
au FileType css call LoadCSSConfiguration()
function! LoadCSSConfiguration()
  setl omnifunc=csscomplete#CompleteCSS
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
  setl iskeyword+=-
endfunction

" Git commit
au FileType gitcommit call LoadGitCommitConfiguration()
function! LoadGitCommitConfiguration()
  setl spell
endfunction

" JavaScript
au FileType javascript call LoadJavaScriptConfiguration()
function! LoadJavaScriptConfiguration()
  setl omnifunc=javascriptcomplete#CompleteJS
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" HTML
au FileType html call LoadHTMLConfiguration()
function! LoadHTMLConfiguration()
  setl omnifunc=htmlcomplete#CompleteTags
  setl iskeyword+=-
endfunction

" Markdown
au FileType markdown call LoadMarkdownConfiguration()
function! LoadMarkdownConfiguration()
  setl omnifunc=htmlcomplete#CompleteTags
  setl formatoptions=tcroqn2 comments=n:>
  setl spell
endfunction

" PHP
au FileType php call LoadPHPConfiguration()
function! LoadPHPConfiguration()
  setl omnifunc=phpcomplete#CompletePHP
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
  setl iskeyword-=$
endfunction

" Python
au FileType python call LoadPythonConfiguration()
function! LoadPythonConfiguration()
  setl omnifunc=pythoncomplete#Complete
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" XML
au FileType xml call LoadXMLConfiguration()
function! LoadXMLConfiguration()
  setl omnifunc=xmlcomplete#CompleteTags
endfunction

" }}}



" {{{ 10. Plugins                                                *vimrc-plugins*

" found vim config file and config dir
let s:vim_conf = expand('<sfile>:p')
let s:vim_dir = fnamemodify(s:vim_conf, ':h') . '/.vim'

let &runtimepath .= ',' . s:vim_dir . '/bundle/neobundle.vim'
if (exists("g:bundle_dir"))
  call neobundle#rc(g:bundle_dir) " load NeoBundle from a specific directory
else
  call neobundle#rc() " load NeoBundle from the classic directory
endif


"""""""""""""""""""                                    *vimrc-plugins-neobundle*
" 10.1. NeoBundle "
"""""""""""""""""""

NeoBundleFetch 'Shougo/neobundle.vim', {
  \     'depends': [
  \         [
  \             'Shougo/vimproc.vim', {
  \                 'build' : {
  \                     'windows' : 'make -f make_mingw32.mak',
  \                     'cygwin' : 'make -f make_cygwin.mak',
  \                     'mac' : 'make -f make_mac.mak',
  \                     'unix' : 'make -f make_unix.mak',
  \                 },
  \             },
  \         ],
  \     ],
  \ }


"""""""""""""""                                            *vimrc-plugins-theme*
" 10.2. Theme "
"""""""""""""""

NeoBundle 'wombat256.vim'
colorscheme wombat256mod
let bundle = neobundle#get('wombat256.vim')
function! bundle.hooks.on_post_source(bundle)
  " This callback permits to override some highlight

  " Change spell detection skin
  hi clear SpellBad
  hi clear SpellCap
  hi clear SpellLocal
  hi clear SpellRare
  hi SpellBad cterm=underline
  hi SpellCap cterm=underline
  hi SpellLocal cterm=underline
  hi SpellRare cterm=underline

  " Highlight color column
  set colorcolumn=+1 " relative to text-width
  highlight ColorColumn ctermbg=0

  " Set sign column with the same background as code edition zone
  hi! link SignColumn Normal

  " Highlight trailing whitespaces
  hi TrailingWhitespace ctermbg=darkyellow
  match TrailingWhitespace /\s\+$/
endfunction


"""""""""""""""""""                                    *vimrc-plugins-languages*
" 10.3. Languages "
"""""""""""""""""""

" --- CSS

NeoBundle 'ap/vim-css-color'

" --- CPP

NeoBundle 'google.vim'

" --- Git

NeoBundle 'tpope/vim-git'

" --- HTML

NeoBundle 'othree/html5.vim'

" --- Javascript

NeoBundle 'pangloss/vim-javascript'

" --- Markdown

NeoBundle 'tpope/vim-markdown'

" --- PHP

NeoBundle '2072/PHP-Indenting-for-VIm'

NeoBundle 'shawncplus/phpcomplete.vim'


"""""""""""""""                                            *vimrc-plugins-tools*
" 10.4. Tools "
"""""""""""""""

" ---  a.vim
NeoBundle 'a.vim'

" ---  Easymotion
let bundle = neobundle#get('vim-easymotion')
let g:EasyMotion_leader_key = '<Leader><Leader>'
NeoBundle 'Lokaltog/vim-easymotion'

" ---  UltiSnips
if has('python') || has('python3')
  let g:UltiSnipsSnippetDirectories = ['snippet'] " Use only my snippets
  let g:UltiSnipsDontReverseSearchPath = 1 " Browse runtimepath in standard order
  let g:UltiSnipsExpandTrigger = '<Tab>'
  let g:UltiSnipsJumpForwardTrigger = '<Tab>'
  let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
  NeoBundle 'SirVer/ultisnips'
endif

" ---  YouCompleteMe
if has('python') || has('python3')
  let g:ycm_complete_in_comments = 1 " complete in comments
  let g:ycm_complete_in_strings = 1 " complete in strings
  let g:ycm_collect_identifiers_from_comments_and_strings = 1
  let g:ycm_collect_identifiers_from_tags_files = 1 " use tag files if needed
  let g:ycm_seed_identifiers_with_syntax = 1 " take care of language syntax
  let g:ycm_key_list_select_completion = ['<C-N>'] " previous completion
  let g:ycm_key_list_previous_completion = ['<C-P>'] " next completion
  let g:ycm_cache_omnifunc = 0 " disable omnifunc cache
  let g:ycm_add_preview_to_completeopt = 0 " disable preview
  NeoBundle 'Valloric/YouCompleteMe', {
    \     'build': {
    \         'unix': './install.sh --clang-completer',
    \         'mac': './install.sh --clang-completer',
    \     },
    \     'vim_version': '7.3.584',
    \ }
endif

" ---  Narrow Region
let g:nrrw_rgn_nohl = 1 " disable highlighting while isolating code
NeoBundle 'chrisbra/NrrwRgn'
let bundle = neobundle#get('NrrwRgn')
function! bundle.hooks.on_post_source(bundle)
  noremap <silent> <Leader>r :NarrowRegion<CR>
endfunction

" ---  Tabular
NeoBundle 'godlygeek/tabular'
let bundle = neobundle#get('tabular')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>a :Tabularize /
  vnoremap <silent> <Leader>a :Tabularize /
endfunction

" ---  Gundo
let g:gundo_width = 40 " gundo pane width
let g:gundo_preview_height = 20 " preview height
let g:gundo_preview_bottom = 1 " preview on bottom of file
let g:gundo_help = 0 " disable help in gundo pane
let g:gundo_close_on_revert = 1 " automatically close the gundo pane on revert
NeoBundle 'bitbucket:sjl/gundo.vim'
let bundle = neobundle#get('gundo.vim')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <Leader>ue :GundoToggle<CR>
endfunction

" ---  Buffergator
let g:buffergator_suppress_keymaps = 1 " delete default keymaps
let g:buffergator_viewport_split_policy = 'L' " split on the left of the screen
NeoBundle 'jeetsukumaran/vim-buffergator'
let bundle = neobundle#get('vim-buffergator')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>be :BuffergatorToggle<CR>
endfunction

" ---  Winresizer
let g:winresizer_start_key = '<C-W><C-W>'
NeoBundle 'jimsei/winresizer'

" ---  CtrlP
let g:ctrlp_map = '<Leader>fo'
let g:ctrlp_by_filename = 1 " search by filename (<C-D> to include folders)
let g:ctrlp_switch_buffer = 'ET' " switch to any buffer in any tab
let g:ctrlp_working_path_mode = 'ra' " set root as the nearest SCM ancestor
let g:ctrlp_clear_cache_on_exit = 0 " persistent cache
let g:ctrlp_show_hidden = 1 " search for hidden files/dirs
let g:ctrlp_custom_ignore = {
  \     'dir':  '\v[\/]\.(git|hg|svn)$'
  \ } " will be ignored in completion (`wildignore` is applied first)
let g:ctrlp_max_files = 1000 " avoid lag if launched in a high level directory
let g:ctrlp_max_depth = 10 " same as above
let g:ctrlp_open_multiple_files = '1vjr' " allow to open several files at once
let g:ctrlp_follow_symlinks = 1 " follow symlinks (but prevent infinite loops)
let g:ctrlp_mruf_case_sensitive = IsLinux() ? 1 : 0 " set case sensitive search
let g:ctrlp_mruf_save_on_update = 0 " only save on Vim exit
NeoBundle 'kien/ctrlp.vim'
let bundle = neobundle#get('ctrlp.vim')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>fr :CtrlPMRU<CR>
  nnoremap <silent> <Leader>bo :CtrlPBuffer<CR>
endfunction

" ---  Tagbar
let g:tagbar_autofocus = 1 " focus tagbar when opened
let g:tagbar_show_visibility = 1 " show public/private/protected
let g:tagbar_compact = 1 " hide superfluous stuff
let g:tagbar_width = 40 " set tagbar width
let g:tagbar_left = 1 " set tagbar pane on the left side
NeoBundle 'majutsushi/tagbar'
let bundle = neobundle#get('tagbar')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>te :TagbarToggle<CR>
endfunction

" ---  MatchIt
NeoBundle 'matchit.zip'

" ---  Vim Visual Star Search
NeoBundle 'nelstrom/vim-visual-star-search'

" ---  Nerd Commenter
NeoBundle 'scrooloose/nerdcommenter'

" ---  Nerd Tree
let g:NERDTreeShowHidden = 1 " show hidden files
let g:NERDTreeQuitOnOpen = 1 " close tree when opening a file
let g:NERDTreeWinSize = 40 " tree width
let g:NERDTreeMinimalUI = 1 " hide superfluous stuff
NeoBundle 'scrooloose/nerdtree'
let bundle = neobundle#get('nerdtree')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>fe :NERDTreeToggle<CR>
endfunction

" ---  Syntastic
let g:syntastic_mode_map = {
  \     'mode': 'passive'
  \ }
let g:syntastic_check_on_wq = 0 " disable on save
let g:syntastic_always_populate_loc_list = 1 " stick any errors in the loclist
let g:syntastic_auto_loc_list = 1 " open loclist on error / else close it
let g:syntastic_c_compiler_options = "-Wall -Wextra"
let g:syntastic_cpp_checkers = [
  \     'cpplint'
  \ ]
NeoBundle 'scrooloose/syntastic'
let bundle = neobundle#get('syntastic')
function! bundle.hooks.on_post_source(bundle)
  nnoremap <silent> <Leader>sc :SyntasticCheck<CR>
  nnoremap <silent> <Leader>st :SyntasticToggleMode<CR>
endfunction

" ---  Multiple Cursors
NeoBundle 'terryma/vim-multiple-cursors'
let bundle = neobundle#get('vim-multiple-cursors')
function! bundle.hooks.on_post_source(bundle)
  vnoremap <silent> <Leader>mc :MultipleCursorsFind<Space>
endfunction

" ---  Abolish
NeoBundle 'tpope/vim-abolish'

" ---  Eunuch
NeoBundle 'tpope/vim-eunuch'

" ---  Fugitive
NeoBundle 'tpope/vim-fugitive', {
  \     'external_commands': ['git'],
  \ }
let bundle = neobundle#get('vim-fugitive')
function! bundle.hooks.on_post_source(bundle)
  " Ensure that the buffers do not pollute the buffers list
  au BufReadPost fugitive://* setl bufhidden=delete
endfunction

" ---  Repeat
NeoBundle 'tpope/vim-repeat'

" ---  Surround
NeoBundle 'tpope/vim-surround'

" ---  Unimpaired
NeoBundle 'tpope/vim-unimpaired'

" ---  Easytags
let g:easytags_by_filetype = '~/.vim/tmp/tags//' " tag files by languages
let g:easytags_include_members = 1 " more complete tag files for C++ and Java
let g:easytags_resolve_links = 1 " follow symlinks
if has('python') || has('python3')
  let g:easytags_python_enabled = 1 " use Python for faster syntax highlighting
endif
let g:easytags_updatetime_warn = 0 " never warn about fast updatetime
NeoBundle 'xolox/vim-easytags', {
  \     'depends': [
  \         'xolox/vim-misc'
  \     ],
  \     'external_commands': ['ctags'],
  \ }
au VimEnter * call CreateDirectory(g:easytags_by_filetype)

" ---  Match Tag
NeoBundle 'gregsexton/MatchTag'

" --- Session
let g:session_directory = '~/.vim/tmp/sessions//' " where to store the sessions
let g:session_default_overwrite = 1 " overwrite last default session
let g:session_autoload = 'no' " do not autoload sessions
let g:session_autosave = 'yes' " automatically save session on vim close
let g:session_command_aliases = 1 " enable aliased commands
set sessionoptions-=options " do not store options in session file
set sessionoptions-=folds   " do not store folds in session file
NeoBundle 'xolox/vim-session', {
  \     'depends': [
  \         'xolox/vim-misc'
  \     ],
  \ }
au VimEnter * call CreateDirectory(g:session_directory)

" --- Airline
let g:airline_theme = 'badwolf' " specify theme
let g:airline_exclude_preview = 1 " remove airline from preview window
let g:airline_left_sep = '»' " change left sections separator
let g:airline_right_sep = '«' " change right sections separator
let g:airline_section_z = '%p%% L%l:C%c' " rearrange percentage/col/line section
let g:airline#extensions#tagbar#enabled = 0 " disable tagbar integration
let g:airline_powerline_fonts = 0 " explicitly disable powerline fonts support
NeoBundle 'bling/vim-airline', {
  \     'vim_version': '7.2',
  \ }
let bundle = neobundle#get('vim-airline')
function! bundle.hooks.on_post_source(bundle)
  set noshowmode " hide the duplicate mode in bottom status bar
endfunction

" --- Auto pairs
NeoBundle 'jiangmiao/auto-pairs'

" --- Rooter
NeoBundle 'airblade/vim-rooter'

" --- Git Gutter
NeoBundle 'airblade/vim-gitgutter'


" Install bundles && generate/check documentation
NeoBundleCheck

" }}}



" {{{ 11. File type / Syntax detection                          *vimrc-filetype*

syntax enable
filetype plugin indent on

" }}}



" Call NeoBundle post source hooks again to support several consecutive
" `source ~/.vimrc`
call neobundle#call_hook('on_post_source')

" Avoid ~/.{vimrc,exrc} modification by autocmd, shell and write
set secure

" vim: isk+=- isk+=*
