" clear all autocommands
autocmd!
" break away from old vi compatibility
set nocompatible
" found vim config file and config dir
let s:vim_conf = expand('<sfile>:p')
let s:vim_dir = fnamemodify(s:vim_conf, ':h') . '/.vim'

" {{{ NeoBundle

let &runtimepath .= ',' . s:vim_dir . '/bundle/neobundle.vim'
if (exists("g:bundle_dir"))
  call neobundle#rc(g:bundle_dir)
else
  call neobundle#rc()
endif

" Load Vundle first
NeoBundleFetch 'Shougo/neobundle.vim'

" Languages plugins
NeoBundle '2072/PHP-Indenting-for-VIm'
NeoBundle 'indenthtml.vim'
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'othree/xml.vim'

" Themes plugins
NeoBundle 'croaker/mustang-vim' "mustang
NeoBundle 'http://blog.toddwerth.com/entry_files/8/ir_black.vim', { 'name': 'ir_black.vim', 'script_type': 'colors' } "ir_black
NeoBundle 'wombat256.vim' "wombat256mod

" Tools plugins
"NeoBundle 'tpope/vim-repeat'
NeoBundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'LustyJuggler'
NeoBundle 'Shougo/neocomplcache.vim'
NeoBundle 'Shougo/vimproc'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'a.vim'
NeoBundle 'airblade/vim-rooter'
NeoBundle 'chrisbra/NrrwRgn'
NeoBundle 'godlygeek/tabular'
NeoBundle 'jeetsukumaran/vim-buffergator'
NeoBundle 'jimsei/winresizer'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'kien/rainbow_parentheses.vim'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'myusuf3/numbers.vim'
NeoBundle 'nelstrom/vim-visual-star-search'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tristen/vim-sparkup'

NeoBundleCheck " check installations

" }}}

" {{{ File type / Syntax detection / Theme

syntax enable
filetype plugin indent on
set t_Co=256
set background=dark
silent! colorscheme wombat256mod
hi CursorLine cterm=bold
set synmaxcol=200       " don't try to highlight long lines

" }}}

" {{{ Functions

" Return 1 if the vimrc configuration has already been loaded else return 0
function! Vimrc()
  return exists("g:vimrc_already_loaded") && g:vimrc_already_loaded != 0
endfunction

" https://github.com/EOL/cukestone/wiki/Vim-cleaning-trailing-whitespaces
" Clean all the trailing whitespaces in the current buffer
function! StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}

" {{{ Global options

set shell=zsh           " shell for :sh
set autoread            " watch for file changes by other programs
set autowrite           " automatically save before :next and :make
set laststatus=2        " status line always on
set encoding=utf-8      " ensure proper encoding
set ttyfast             " we have a fast terminal
set modelines=0         " don't care about modeline
set fileformats=unix,mac,dos " support all three newline formats
set tags=./.tags;,~/.vimtags " define tags file path
set cryptmethod="blowfish" " define strong crypt method
set noswapfile          " disable swap files

set backup              " enable backup files
set backupdir=~/.vim/tmp/backup//
if !isdirectory(expand(&backupdir))
  silent! call mkdir(expand(&backupdir), "p")
endif

set undofile            " enable undo files
set undolevels=1000     " number of undo level
set undoreload=10000    " number of lines to save for undo
set undodir=~/.vim/tmp/undo//
if !isdirectory(expand(&undodir))
  silent! call mkdir(expand(&undodir), "p")
endif

set spellfile=~/.vim/spell/en.utf-8.add " enable spell file

" }}}

" {{{ User Interface

set timeoutlen=500      " time to wait when a part of a maped sequence is typped
set ttimeoutlen=0       " instant insert mode exit
set matchtime=3         " tenths of second to show the matching bracket
set nonumber            " don't show line number
set cmdheight=1         " explicitly set the command line height
set showcmd             " show (partial) command in the last line of the screen
set scrolloff=8         " keep at least 5 lines after the cusor when scrolling
set sidescrolloff=10    " (same as above for side scrolling)
set lazyredraw          " only redraw when needed
set nolist              " hide invisible characters
set wrap                " split the line if it is too long
set shortmess=atI       " disable vim welcome message and shorter messages
set wildmenu            " better command line completion menu
set cursorline          " highlight cursor line
set wildmode=list:longest,list,full " `-> better
set wildignore+=*.o,*.so,*.a,*.dylib,*.pyc  " ignore compiled files
set wildignore+=*.zip,*.gz,*.xz             " ignore compressed files
set wildignore+=.*.sw*,*~                   " ignore temporary files
set tabpagemax=20       " allow lots of tabs

" }}}

" {{{ Text editing && Search behavior

set backspace=2         " fix backspace (on some OS/term)
set cpoptions=ces$      " make the 'cw' and like commands put a $ at the end
set ignorecase          " ignore case when searching
set smartcase           "  `-> except if there is one uppercase character
set incsearch           " show matches as soon as posseble
set wrapscan            " searches wrap around the end of the file
set diffopt=filler,iwhite " ignore all whitespace and sync
set showmatch           " show the matching bracket when inserting
set completeopt=menuone,preview " more complete autocompletion
set nostartofline       " leave my cursor position alone!
set foldmethod=manual   " ensure that foldmethod is manual
set virtualedit=block   " allow the cursor to go in to 'invalid' places
set wrap linebreak textwidth=0 " disable autowrap
set history=1000        " increase history size
set selection=inclusive " cursor is in selection
set gdefault            " default substitute g flag
if !Vimrc()
  set hlsearch " highlight last search matches
endif

" spell checker
set spelllang=en        " configure spell language
highlight clear SpellBad
highlight clear SpellCap
highlight clear SpellLocal
highlight clear SpellRare

" format option stuff (see :help fo-table)
set fo=croj

" Highlight trailing whitespaces
highlight TrailingWhitespace ctermbg=darkyellow
match TrailingWhitespace /\s\+$/

" clean trailing whitespaces on file saving
autocmd BufWritePre * :call StripTrailingWhitespaces()

" remember last position in file
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" }}}

" {{{ Indentation / Tabulations

set autoindent          " auto-indentation (most of time override by plugins)
set copyindent          " copy the previous indentation on autoindenting
set smarttab            " insert shiftwidth spaces instead of tabs
set expandtab           " replace tabs by spaces
set shiftwidth=2        " n spaces when using <Tab>
set softtabstop=2       " n spaces when using <Tab>
set tabstop=2           " n spaces when using <Tab>
set hidden              " when a tab is closed, don't remove the buffer

" }}}

" {{{ Errors

" turn off error bells
set noerrorbells
set novisualbell
set t_vb=

" }}}

" {{{ Binds

" easy switch between tabs
nnoremap <silent> <S-h> gT
nnoremap <silent> <S-l> gt

" up and down are more logical with g
nnoremap <silent> j gj
vnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> k gk

" center on each search result
nnoremap <silent> n nzz
nnoremap <silent> <S-n> Nzz

" define leading key
let mapleader = ','

" quickly edit/reload the vimrc file
nnoremap <silent> <Leader>ve :e $MYVIMRC<CR>
nnoremap <silent> <Leader>vs :source $MYVIMRC<CR>

" hide last search matches
nnoremap <silent> <space> :nohlsearch<CR>

" use `,d`  `,D` `,x` `,X` to delete without altering the yanked stack
nnoremap <silent> <Leader>d "_d
vnoremap <silent> <Leader>d "_d
nnoremap <silent> <Leader>D "_D
vnoremap <silent> <Leader>D "_D
nnoremap <silent> <Leader>x "_x
vnoremap <silent> <Leader>x "_x
nnoremap <silent> <Leader>X "_X
vnoremap <silent> <Leader>X "_X

" copy from the cursor to the end of line using Y
nnoremap <silent> Y y$

" man key on M
nnoremap <silent> M K

" keep the cursor in place while joining lines
nnoremap <silent> J myJ`y

" split line with K
nnoremap <silent> K i<CR><Esc>^mzgk:silent! s/\v +$//<CR>:nohlsearch<CR>`z

" use ^a and ^e to move in command line
cnoremap <silent> <C-a> <C-b>

" insert blank lines without entering insert mode
nnoremap <silent> go o<Esc>
nnoremap <silent> gO O<Esc>

" disable annoying keys
map <silent> <F1> <Nop>
imap <silent> <F1> <Nop>
map <silent> Q <Nop>

" also bind `jj` to leave insert/command mode
inoremap <silent> jj <C-c>
cnoremap <silent> jj <C-c>

" useful insert mode binds
inoremap <silent> AA <C-o>A
inoremap <silent> II <C-o>I
inoremap <silent> CC <C-o>C
inoremap <silent> OO <C-o>O
inoremap <silent> <C-o><C-o> <C-o>o

" Panes move
noremap <silent> <C-h> <C-W>h
noremap <silent> <C-j> <C-W>j
noremap <silent> <C-k> <C-W>k
noremap <silent> <C-l> <C-W>l
inoremap <silent> <C-h> <Esc><C-W>h
inoremap <silent> <C-j> <Esc><C-W>j
inoremap <silent> <C-k> <Esc><C-W>k
inoremap <silent> <C-l> <Esc><C-W>l

" }}}

" {{{ Abbrev

" create/move/close tab
cabbrev tn tabnew
cabbrev tm tabmove
cabbrev tq tabclose

" close buffer
cabbrev bq bdelete

" }}}

" {{{ Language specific configuration

" C/C++/Ruby
" Keep 2/2/2 default indentation

" CSS
autocmd FileType css call LoadCSSConfiguration()
function! LoadCSSConfiguration()
  setlocal omnifunc=csscomplete#CompleteCSS
endfunction

" Git commit
autocmd FileType gitcommit call LoadGitConfiguration()
function! LoadGitConfiguration()
  setlocal spell
endfunction

" JavaScript
autocmd FileType javascript call LoadJavaScriptConfiguration()
function! LoadJavaScriptConfiguration()
  setlocal omnifunc=javascriptcomplete#CompleteJS
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal tabstop=4
endfunction

" HTML
autocmd FileType html call LoadHTMLConfiguration()
function! LoadHTMLConfiguration()
  setlocal omnifunc=htmlcomplete#CompleteTags
endfunction

" Markdown
autocmd FileType markdown call LoadMarkdownConfiguration()
function! LoadMarkdownConfiguration()
  setlocal omnifunc=htmlcomplete#CompleteTags
  setlocal formatoptions=tcroqn2 comments=n:>
  setlocal spell
  highlight SpellBad cterm=underline
  highlight SpellCap cterm=underline
  highlight SpellLocal cterm=underline
  highlight SpellRare cterm=underline
endfunction

" PHP
autocmd FileType php call LoadPHPConfiguration()
function! LoadPHPConfiguration()
  setlocal omnifunc=phpcomplete#CompletePHP
  setlocal iskeyword-=$
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal tabstop=4
endfunction

" Python
autocmd FileType python call LoadPythonConfiguration()
function! LoadPythonConfiguration()
  setlocal shiftwidth=4
  setlocal softtabstop=4
  setlocal tabstop=4
endfunction

" XML
autocmd FileType xml call LoadXMLConfiguration()
function! LoadXMLConfiguration()
  setlocal omnifunc=xmlcomplete#CompleteTags
endfunction

" }}}

" {{{ Plugins extra-configuration

" buffergator
let g:buffergator_suppress_keymaps = 1
let g:buffergator_viewport_split_policy = 'B'
nnoremap <silent> <Leader>be :BuffergatorToggle<CR>

" CtrlP
let g:ctrlp_map = '<Leader>o'
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc)$|(^|[/\\])\.(hg|git|bzr|svn)($|[/\\])'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 1000
let g:ctrlp_max_depth = 10
let g:ctrlp_clear_cache_on_exit = 0
nnoremap <silent> <Leader>bo :CtrlPBuffer<CR>

" easymotion
let g:EasyMotion_leader_key = '<Leader>w'

" jscomplete

" html
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" lusty juggler
nnoremap <silent> <Leader>bO :LustyJuggler<CR>

" multiple cursors
vnoremap <silent> <Leader>m :MultipleCursorsFind<Space>

" narrowregion
let g:nrrw_rgn_nohl = 1
noremap <silent> <Leader>r :NarrowRegion<CR>

" nerdtree
let NERDTreeShowHidden = 1 " show hidden files
let NERDTreeQuitOnOpen = 1
let NERDTreeWinSize = 40
let NERDTreeMinimalUI = 1
nnoremap <silent> <Leader>e :NERDTreeToggle<CR>

" neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_auto_completion_start_length = 3
let g:neocomplcache_max_list = 20
"inoremap <silent> <expr> <C-y> neocomplcache#close_popup()
"inoremap <silent> <expr> <C-e> neocomplcache#cancel_popup()

" php indent
let g:PHP_vintage_case_default_indent = 1

" powerline
set noshowmode " hide the duplicate mode in bottom status bar

" rainbow parenthesis
autocmd VimEnter * call LoadRainbowParenthesisConfiguration()
function! LoadRainbowParenthesisConfiguration()
  let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]
  let g:rbpt_max = 12
  let g:rbpt_loadcmd_toggle = 0
  RainbowParenthesesToggle
endfunction
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

" sparkup
let g:sparkupExecuteMapping = '<C-_>'
let g:sparkupNextMapping = '<C-f>'

" syntastic
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_c_compiler_options = "-Wall -Wextra"
let g:syntastic_cpp_checkers = ['cpplint']
nnoremap <silent> <Leader>s :SyntasticCheck<CR>
nnoremap <silent> <Leader>S :SyntasticToggleMode<CR>

" tabular
nnoremap <silent> <Leader>a :Tabularize /
vnoremap <silent> <Leader>a :Tabularize /

" tagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_show_visibility = 1
let g:tagbar_compact = 1
let g:tagbar_width = 40
nnoremap <silent> <Leader>te :TagbarToggle<CR>

" winresizer
let g:winresizer_start_key = '<C-w><C-w>'

" }}}


" Useful to avoid double annoying commands execution
let g:vimrc_already_loaded = 1
