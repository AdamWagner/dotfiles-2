" Author: Aymeric Beaumet <aymeric@beaumet.me>
" Github: @abeaumet/dotfiles
"
"
" *vimrc-options*        Global options
" *vimrc-ui*             User Interface
" *vimrc-search*         Search & Replace behavior
" *vimrc-edition*        Text editing
" *vimrc-indent-tab*     Indentation / Tabulations
" *vimrc-errors*         Errors
" *vimrc-binds*          Binds
" *vimrc-languages*      Languages specific configuration
" *vimrc-plugins*        Plugins
" *vimrc-filetype*       File type / Syntax detection
" *vimrc-helpers*        Helpers
"

" Avoid double file sourcing (this cause problems with some lazy plugin loading)
if exists('g:vimrc_loaded') | finish | endif | let g:vimrc_loaded = 1



" {{{ Global options ------------------------------------------- *vimrc-options*

" break away from old vi compatibility
set nocompatible

" clear all autocommands
autocmd!

set shell=zsh           " shell for :sh
set autoread            " watch for file changes by other programs
set autowrite           " automatically save before :next and :make
set encoding=utf-8      " ensure proper encoding
set ttyfast             " we have a fast terminal
set modeline            " enable modelines
set modelines=3         " consider the first/last three lines
set fileformats=unix,mac,dos " support all three newline formats
set tags=tags;/         " define tags file path
set cryptmethod="blowfish" " define strong crypt method

set noswapfile          " disable swap files

set backup              " enable backup files
set backupdir=~/.vim/tmp/backup// " backup files directory
au VimEnter * if !isdirectory(expand(&backupdir)) | silent! call mkdir(expand(&backupdir), "p") | endif

set undofile            " enable undo files
set undolevels=1000     " number of undo level
set undoreload=10000    " number of lines to save for undo
set undodir=~/.vim/tmp/undo// " undo files directory
au VimEnter * if !isdirectory(expand(&undodir)) | silent! call mkdir(expand(&undodir), "p") | endif

" }}}



" {{{ User Interface ------------------------------------------------ *vimrc-ui*

set timeoutlen=500      " time to wait when a part of a maped sequence is typped
set ttimeoutlen=0       " instant insert mode exit using escape
set matchtime=3         " tenths of second to show the matching bracket
set cmdheight=1         " explicitly set the command line height
set showcmd             " show (partial) command in the last line of the screen
set lazyredraw          " only redraw when needed
set shortmess=aoOsI     " disable vim welcome message / enable shorter messages
set cursorline          " highlight cursor line
set wildmenu            " better command line completion menu
set wildmode=list:longest,list,full " `-> better
set wildignore+=*.o,*.so,*.a,*.dylib,*.pyc  " ignore compiled files
set wildignore+=*.zip,*.gz,*.xz,*.tar       " ignore compressed files
set wildignore+=.*.sw*,*~                   " ignore temporary files
set tabpagemax=20       " allow lots of tabs
set hidden              " when a tab is closed, do not delete the buffer
set laststatus=2        " always display status line
set t_Co=256            " 256 colors
set background=dark     " dark background
hi CursorLine cterm=bold " highlight cursor line
autocmd VimEnter * NeoBundleSource wombat256.vim " choose theme

" }}}



" {{{ Search & Replace behavior --------------------------------- *vimrc-search*

set ignorecase          " ignore case when searching
set smartcase           "  `-> except if there is one uppercase character
set incsearch           " show matches as soon as possible
set wrapscan            " searches wrap around the end of the file
set showmatch           " show the matching bracket when inserting
set gdefault            " default substitute g flag
au VimEnter * set hlsearch " highlight last search matches
au InsertEnter * :setlocal nohlsearch " disable search highlighting in insert mode
au InsertLeave * :setlocal hlsearch " ... ands re-enable when leaving

" }}}



" {{{ Text editing --------------------------------------------- *vimrc-edition*

set backspace=2         " fix backspace (on some OS/term)
set nostartofline       " leave my cursor position alone!
set foldmethod=manual   " ensure that foldmethod is manual
set virtualedit=block   " allow the cursor to go in to 'invalid' places
set wrap linebreak textwidth=0 " disable autowrap
set history=1000        " increase history size
set selection=inclusive " cursor is in selection
set scrolloff=8         " keep at least 8 lines after the cusor when scrolling
set sidescrolloff=10    " (same as above about columns during side scrolling)
set nolist              " hide invisible characters

" spell checker
set spelllang=en        " configure spell language
set spellfile=~/.vim/spell/en.utf-8.add " specify spell file
set nospell
highlight clear SpellBad
highlight clear SpellCap
highlight clear SpellLocal
highlight clear SpellRare

" format option stuff (see :help fo-table)
set fo=cro
silent! set fo+=j " not compatible with all vim versions

" Highlight trailing whitespaces
highlight TrailingWhitespace ctermbg=darkyellow
match TrailingWhitespace /\s\+$/

" remember last position in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

" }}}



" {{{ Indentation / Tabulations ----------------------------- *vimrc-indent-tab*

set autoindent          " auto-indentation
set smarttab            " insert shiftwidth spaces instead of tabs
set expandtab           " replace tabs by spaces
au VimEnter * set shiftwidth=2  " n spaces when using <Tab>
au VimEnter * set softtabstop=2 " n spaces when using <Tab>
au VimEnter * set tabstop=2     " n spaces when using <Tab>

" }}}



" {{{ Errors ---------------------------------------------------- *vimrc-errors*

" turn off error bells
set noerrorbells
set novisualbell
set t_vb=

" }}}



" {{{ Binds ------------------------------------------------------ *vimrc-binds*

" easy navigation between tabs
nnoremap <silent> <S-H> gT
nnoremap <silent> <S-L> gt

" up and down are more logical with g
nnoremap <silent> j gj
vnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> k gk

" center on search result
nnoremap <silent> n nzz
nnoremap <silent> <S-N> Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" define leading key
let mapleader = '\'

" hide last search matches
nnoremap <silent> <Space> :nohlsearch<CR>

" use `,d`  `,D` `,x` `,X` to delete without altering the yanked stack
nnoremap <silent> <Leader>d "_d
vnoremap <silent> <Leader>d "_d
nnoremap <silent> <Leader>D "_D
vnoremap <silent> <Leader>D "_D
nnoremap <silent> <Leader>x "_x
vnoremap <silent> <Leader>x "_x
nnoremap <silent> <Leader>X "_X
vnoremap <silent> <Leader>X "_X

" copy from the cursor to the end of line using Y
nnoremap <silent> Y y$

" man key on M
nnoremap <silent> M K

" keep the cursor in place while joining lines
nnoremap <silent> J myJ`y

" split line with K
nnoremap <silent> K i<CR><Esc>^mzgk:silent! s/\v +$//<CR>:nohlsearch<CR>`z

" insert blank lines without entering insert mode
nnoremap <silent> go o<Esc>0D
nnoremap <silent> gO O<Esc>0D

" disable annoying keys
map <silent> <F1> <Nop>
imap <silent> <F1> <Nop>
map <silent> Q <Nop>

" bind `jj` to leave insert mode
inoremap <silent> jj <C-C>

" useful insert mode binds
inoremap <silent> II <C-O>I
inoremap <silent> AA <C-O>A
inoremap <silent> CC <C-O>C
inoremap <silent> OO <C-O>O
inoremap <silent> <C-O><C-O> <C-O>o
inoremap <silent> JJ <C-O>J

" buffer
nnoremap <silent> <leader>bq :bdelete<CR>

" tab
nnoremap <silent> <leader>tc :tabnew<CR>
nnoremap <silent> <leader>tq :tabclose<CR>

" clean trailing whitespaces
nnoremap <silent>  <leader>dw :call StripTrailingWhitespaces()<CR>

" }}}



" {{{ Languages specific configuration ----------------------- *vimrc-languages*


" Each language configuration follows the steps below (none is mandatory):
"
"   1. Set omnifunc
"   2. Set indentation
"   3. Set other options


au FileType c,cpp call LoadCConfiguration()
function! LoadCConfiguration()
  setl omnifunc=ccomplete#Complete
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" CSS
au FileType css call LoadCSSConfiguration()
function! LoadCSSConfiguration()
  setl omnifunc=csscomplete#CompleteCSS
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
  setl iskeyword+=-
endfunction

" Git commit
au FileType gitcommit call LoadGitCommitConfiguration()
function! LoadGitCommitConfiguration()
  setl spell
  highlight SpellBad cterm=underline
  highlight SpellCap cterm=underline
  highlight SpellLocal cterm=underline
  highlight SpellRare cterm=underline
endfunction

" JavaScript
au FileType javascript call LoadJavaScriptConfiguration()
function! LoadJavaScriptConfiguration()
  setl omnifunc=javascriptcomplete#CompleteJS
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" HTML
au FileType html call LoadHTMLConfiguration()
function! LoadHTMLConfiguration()
  setl omnifunc=htmlcomplete#CompleteTags
  setl iskeyword+=-
endfunction

" Markdown
au FileType markdown call LoadMarkdownConfiguration()
function! LoadMarkdownConfiguration()
  setl omnifunc=htmlcomplete#CompleteTags
  setl formatoptions=tcroqn2 comments=n:>
  setl spell
  highlight SpellBad cterm=underline
  highlight SpellCap cterm=underline
  highlight SpellLocal cterm=underline
  highlight SpellRare cterm=underline
endfunction

" PHP
au FileType php call LoadPHPConfiguration()
function! LoadPHPConfiguration()
  setl omnifunc=phpcomplete#CompletePHP
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
  setl iskeyword-=$
  setl iskeyword+=:
endfunction

" Python
au FileType python call LoadPythonConfiguration()
function! LoadPythonConfiguration()
  setl omnifunc=pythoncomplete#Complete
  setl shiftwidth=4
  setl softtabstop=4
  setl tabstop=4
endfunction

" XML
au FileType xml call LoadXMLConfiguration()
function! LoadXMLConfiguration()
  setl omnifunc=xmlcomplete#CompleteTags
endfunction

" Text
au FileType text call LoadTextConfiguration()
function! LoadTextConfiguration()
  setl formatoptions=tcroqn2
  setl spell
  highlight SpellBad cterm=underline
  highlight SpellCap cterm=underline
  highlight SpellLocal cterm=underline
  highlight SpellRare cterm=underline
endfunction

" }}}



" {{{ Plugins -------------------------------------------------- *vimrc-plugins*

" found vim config file and config dir
let s:vim_conf = expand('<sfile>:p')
let s:vim_dir = fnamemodify(s:vim_conf, ':h') . '/.vim'

let &runtimepath .= ',' . s:vim_dir . '/bundle/neobundle.vim'
if (exists("g:bundle_dir"))
  call neobundle#rc(g:bundle_dir) " load NeoBundle
else
  call neobundle#rc() " load NeoBundle
endif
let g:neobundle#types#git#default_protocol = 'https' " define downloading protocol


""""""""""""""""""""""""
" Load NeoBundle first "
""""""""""""""""""""""""

NeoBundleFetch 'Shougo/neobundle.vim', {
  \     'depends': [
  \         [
  \             'Shougo/vimproc.vim', {
  \                 'build': {
  \                     'unix': 'make-fmake_unix.mak',
  \                     'mac': 'make-fmake_mac.mak',
  \                 }
  \             }
  \         ]
  \     ]
  \ }


""""""""""
" Themes "
""""""""""

" Only one of the following themes will be loaded (using `NeoBundleSource`)

NeoBundleLazy 'Mustang2'
let bundle = neobundle#get('Mustang2')
function! bundle.hooks.on_post_source(bundle)
  colorscheme mustang
endfunction

NeoBundleLazy 'http://blog.toddwerth.com/entry_files/8/ir_black.vim', {
  \     'name': 'ir_black.vim',
  \     'script_type': 'colors',
  \ }
let bundle = neobundle#get('ir_black.vim')
function! bundle.hooks.on_post_source(bundle)
  colorscheme irblack
endfunction

NeoBundleLazy 'wombat256.vim'
let bundle = neobundle#get('wombat256.vim')
function! bundle.hooks.on_post_source(bundle)
  colorscheme wombat256mod
endfunction

"""""""""""""
" Languages "
"""""""""""""

NeoBundleLazy '2072/PHP-Indenting-for-VIm', {
  \     'autoload': {
  \         'filetypes': ['php']
  \     }
  \ }
let bundle = neobundle#get('PHP-Indenting-for-VIm')
function! bundle.hooks.on_source(bundle)
  let g:PHP_vintage_case_default_indent = 1 " change indentation
endfunction

NeoBundleLazy 'othree/html5.vim', {
  \     'autoload': {
  \         'filetypes': ['html', 'markdown']
  \     }
  \ }

NeoBundleLazy 'phpcomplete.vim', {
  \     'autoload': {
  \         'filetypes': ['php']
  \     }
  \ }

NeoBundleLazy 'pangloss/vim-javascript', {
  \     'autoload': {
  \         'filetypes': ['javascript']
  \     }
  \ }

NeoBundle 'tpope/vim-git'

NeoBundle 'tpope/vim-markdown'


"""""""""
" Tools "
"""""""""

NeoBundleLazy 'a.vim', {
  \     'autoload': {
  \         'filetypes': ['c', 'cpp']
  \     }
  \ }

NeoBundleLazy 'closetag.vim', {
  \     'autoload': {
  \         'filetypes': ['html', 'xml']
  \     }
  \ }

NeoBundleLazy 'mattn/zencoding-vim', {
  \     'autoload': {
  \         'filetypes': ['html', 'xml']
  \     }
  \ }
let bundle = neobundle#get('zencoding-vim')
function! bundle.hooks.on_source(bundle)
  let g:user_zen_leader_key = '<C-E>'
  let g:user_zen_mode = 'a' " enable all function in all mode
endfunction

NeoBundle 'Lokaltog/powerline', {
  \     'rtp': 'powerline/bindings/vim/'
  \ }
let bundle = neobundle#get('powerline')
function! bundle.hooks.on_source(bundle)
  set noshowmode " hide the duplicate mode in bottom status bar
endfunction

NeoBundle 'Lokaltog/vim-easymotion'
let bundle = neobundle#get('vim-easymotion')
function! bundle.hooks.on_source(bundle)
  let g:EasyMotion_leader_key = '<Leader><Leader>'
endfunction

NeoBundle 'SirVer/ultisnips'

NeoBundle 'Valloric/YouCompleteMe', {
  \     'build': {
  \         'unix': './install.sh --clang-completer',
  \         'mac': './install.sh --clang-completer',
  \     },
  \     'vim_version': '7.3.584',
  \ }

NeoBundle 'abeaumet/ack.vim', {
  \     'external_commands': 'ack'
  \ }
let bundle = neobundle#get('ack.vim')
function! bundle.hooks.on_source(bundle)
  let g:ack_autoclose = 1 " automatically closing the quickfix window
endfunction

NeoBundle 'airblade/vim-rooter'

NeoBundle 'chrisbra/NrrwRgn'
let bundle = neobundle#get('NrrwRgn')
function! bundle.hooks.on_source(bundle)
  let g:nrrw_rgn_nohl = 1 " disable highlighting in the main window while isolating code
  noremap <silent> <Leader>r :NarrowRegion<CR>
endfunction

NeoBundle 'godlygeek/tabular'
let bundle = neobundle#get('tabular')
function! bundle.hooks.on_source(bundle)
  nnoremap <silent> <Leader>a :Tabularize /
  vnoremap <silent> <Leader>a :Tabularize /
endfunction

NeoBundle 'bitbucket:sjl/gundo.vim'
let bundle = neobundle#get('gundo.vim')
function! bundle.hooks.on_source(bundle)
  let g:gundo_width = 40 " gundo pane width
  let g:gundo_preview_height = 40 " preview height
  let g:gundo_preview_bottom = 1 " preview on file bottom (not in pane)
  let g:gundo_help = 0 " disable help in gundo pane
  let g:gundo_close_on_revert = 1 " automatically close the gundo pane on revert
  nnoremap <Leader>ue :GundoToggle<CR>
endfunction

NeoBundle 'jeetsukumaran/vim-buffergator'
let bundle = neobundle#get('vim-buffergator')
function! bundle.hooks.on_source(bundle)
  let g:buffergator_suppress_keymaps = 1 " delete default keymaps
  let g:buffergator_viewport_split_policy = 'L' " split on the bottom of the screen
  nnoremap <silent> <Leader>be :BuffergatorToggle<CR>
endfunction

NeoBundle 'jimsei/winresizer'
let bundle = neobundle#get('winresizer')
function! bundle.hooks.on_source(bundle)
  let g:winresizer_start_key = '<C-W><C-W>'
endfunction

NeoBundle 'kien/ctrlp.vim'
let bundle = neobundle#get('ctrlp.vim')
function! bundle.hooks.on_source(bundle)
  let g:ctrlp_map = '<Leader>fo'
  let g:ctrlp_custom_ignore = {
    \     'dir':  '\v[\/]\.(git|hg|svn)$'
    \ } " will be ignored in completion (the `wildignore` option is considered before these patterns)
  let g:ctrlp_switch_buffer = 't' " if the file exists in a buffer in the current tab, jump to it
  let g:ctrlp_working_path_mode = 'ra' " the nearest ancestor containing a SCM configuration file (.git, ...)
  let g:ctrlp_max_files = 1000 " avoid lag if launched in a top directory (~ for example)
  let g:ctrlp_max_depth = 10 " same as above
  let g:ctrlp_clear_cache_on_exit = 0 " keep cache across sessions
  let g:ctrlp_show_hidden = 1 " search for hidden files
  let g:ctrlp_follow_symlinks = 1 " follow symlinks (but prevent infinite loops)
  nnoremap <silent> <Leader>bo :CtrlPBuffer<CR>
endfunction

NeoBundle 'majutsushi/tagbar'
let bundle = neobundle#get('tagbar')
function! bundle.hooks.on_source(bundle)
  let g:tagbar_autofocus = 1 " focus tagbar when opened
  let g:tagbar_autoclose = 1 " close tagbar when opening a tag
  let g:tagbar_show_visibility = 1 " show public/private/protected
  let g:tagbar_compact = 1 " hide superfluous stuff
  let g:tagbar_width = 40 " set tagbar width
  let g:tagbar_left = 1 " set tagbar pane on the left side
  nnoremap <silent> <Leader>te :TagbarToggle<CR>
endfunction

NeoBundle 'matchit.zip'

NeoBundle 'myusuf3/numbers.vim'

NeoBundle 'nelstrom/vim-visual-star-search'

NeoBundle 'scrooloose/nerdcommenter'

NeoBundleLazy 'scrooloose/nerdtree', {
  \     'autoload': {
  \         'explorer': 1
  \     }
  \ }
let bundle = neobundle#get('nerdtree')
function! bundle.hooks.on_source(bundle)
  let NERDTreeShowHidden = 1 " show hidden files
  let NERDTreeQuitOnOpen = 1 " close tree when opening a file
  let NERDTreeWinSize = 40 " tree width
  let NERDTreeMinimalUI = 1 " hide superfluous stuff
  nnoremap <silent> <Leader>fe :NERDTreeToggle<CR>
endfunction

NeoBundle 'scrooloose/syntastic'
let bundle = neobundle#get('syntastic')
function! bundle.hooks.on_source(bundle)
  let g:syntastic_mode_map = {
    \     'mode': 'passive'
    \ }
  let g:syntastic_check_on_wq = 0 " disable on save
  let g:syntastic_always_populate_loc_list = 1 " stick any errors in the loclist
  let g:syntastic_auto_loc_list = 1 " open loclist on error / else close it
  let g:syntastic_c_compiler_options = "-Wall -Wextra"
  let g:syntastic_cpp_checkers = [
    \     'cpplint'
    \ ]
  nnoremap <silent> <Leader>c :SyntasticCheck<CR>
  nnoremap <silent> <Leader>C :SyntasticToggleMode<CR>
endfunction

NeoBundle 'terryma/vim-multiple-cursors'
let bundle = neobundle#get('vim-multiple-cursors')
function! bundle.hooks.on_source(bundle)
  vnoremap <silent> <Leader>m :MultipleCursorsFind<Space>
endfunction

NeoBundle 'tpope/vim-abolish'

NeoBundle 'tpope/vim-eunuch'

NeoBundle 'tpope/vim-fugitive', { 'external_commands': 'git' }

NeoBundle 'tpope/vim-repeat'

NeoBundle 'tpope/vim-speeddating'

NeoBundle 'tpope/vim-surround'

NeoBundle 'tpope/vim-unimpaired'

NeoBundle 'xolox/vim-easytags', {
  \     'depends': [
  \         'xolox/vim-misc'
  \     ]
  \ }
let bundle = neobundle#get('vim-easytags')
function! bundle.hooks.on_source(bundle)
  "let g:easytags_by_filetype = 1 " separate tag files for each languages (https://github.com/xolox/vim-easytags/issues/60)
  let g:easytags_include_members = 1 " more complete tag files for C++ and Java
  let g:easytags_resolve_links = 1 " follow symlinks
  let g:easytags_python_enabled = 1 " use Python for faster syntax highlighting
endfunction


" Check installation
NeoBundleCheck

" }}}



" {{{ File type / Syntax detection ---------------------------- *vimrc-filetype*

syntax enable
filetype plugin indent on

" }}}



" {{{ Helpers -------------------------------------------------- *vimrc-helpers*

" https://github.com/EOL/cukestone/wiki/Vim-cleaning-trailing-whitespaces
" Clean all the trailing whitespaces in the current buffer
function! StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}


" vim: isk+=- isk+=*
