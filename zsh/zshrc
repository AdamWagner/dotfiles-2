###########
# Helpers #
###########

# return 0 if the os is linux
function is_linux() { return $([ `uname -s` = Linux ]); }

# return 0 if the os is macosx
function is_macosx() { return $([ `uname -s` = Darwin ]); }

# return 0 if the os is bsd
function is_bsd() { return $([[ `uname -s` =~ .*bsd.* ]]); }

##########
# Colors #
##########

COLOR_RESET=$'%{\033[0m%}'

COLOR_BOLD=$'%{\033[1m%}'
COLOR_UNDERLINE=$'%{\033[4m%}'
COLOR_INVERSE=$'%{\033[7m%}'

COLOR_BLUE=$'%{\033[38;05;75m%}'
COLOR_SMOOTH_GREEN=$'%{\033[38;05;76m%}'
COLOR_GREEN=$'%{\033[38;05;34m%}'
COLOR_LIGHT_GREEN=$'%{\033[38;05;40m%}'
COLOR_YELLOW=$'%{\033[38;05;220m%}'
COLOR_RED=$'%{\033[38;05;1m%}'
COLOR_ORANGE=$'%{\033[38;05;202m%}'

################
# Autocomplete #
################

# Add completion scripts from a custom directory
fpath=("$HOME/.zsh/completion" $fpath)

# Enable advanced completion
autoload -U compinit && compinit

# Allow arrow navigation
zstyle ':completion:*' menu select

# Ignore compiled files on vim completion
zstyle ':completion:*:*:(vi|vim):*:*files' ignored-patterns '*.(a|dylib|so|o)'

# Don't complete directory we are already in (../here)
zstyle ':completion:*' ignore-parents parent pwd

# Cache to increase speed
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$HOME/.zsh/tmp/cache"

# Fuzzy matching (allow approximation)
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

# Ignore completion functions
zstyle ':completion:*:functions' ignored-patterns '_*'

setopt AUTO_REMOVE_SLASH   # autoremove slash when not needed
setopt AUTO_PARAM_SLASH    # automatically append a slash after a directory
unsetopt COMPLETE_IN_WORD  # complete at the end of a word even if the cursor is not after the last character

#########
# Alias #
#########

# Fast access to configuration files
alias sz="source $HOME/.zshrc"
alias ez="$EDITOR $HOME/.zshrc"
alias eg="$EDITOR $HOME/.gitconfig"
alias ev="$EDITOR $HOME/.vimrc"

alias grep='grep --color=auto'

alias -g C=' | wc -l'
alias -g G=' | grep' # e.g.: 'ls | grep -e foo' <=> 'ls G -e foo'
alias -g L=' | less'
alias -g H=' | head'
alias -g T=' | tail'
alias -g S=' | sort'

alias -g EC=' |& wc -l'
alias -g EG=' |& grep'
alias -g EL=' |& less'
alias -g EH=' |& head'
alias -g ET=' |& tail'
alias -g ES=' |& sort'

alias -g N=' &>/dev/null'

############
# Browsing #
############

# Quickly way to browse parent directories
rationalise-dot()
{
  if [[ $LBUFFER = *.. ]] ; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

###########
# Binding #
###########

# Use emacs bindings in console
bindkey -e

# Fix some bindings
bindkey '^[OH'		beginning-of-line       # Home
bindkey '^[OF'		end-of-line             # End
bindkey '^[[6~'		history-search-forward  # Page down
bindkey '^[[5~'		history-search-backward # Page up
bindkey '^[[2~'		overwrite-mode          # Insert
bindkey '^[[1;5D'	backward-word           # Ctrl <-
bindkey '^[[1;5C'	forward-word            # Ctrl ->
bindkey '^[[3~'		delete-char             # Delete

###############
# Environment #
###############

export EDITOR=vim
export USE_EDITOR=$EDITOR
export VISUAL=$EDITOR
export VIEWER=open
export PAGER=less

###########
# History #
###########

export SAVEHIST=10000
export HISTSIZE=10000
export HISTFILE="$HOME/.zsh/tmp/history"

setopt APPEND_HISTORY     # do not overwrite history
setopt INC_APPEND_HISTORY # write after each command
setopt SHARE_HISTORY      # share history between multiple shell sessions
setopt EXTENDED_HISTORY   # more information in history (beginning time, elpased time and command)
setopt HIST_IGNORE_DUPS   # avoid duplicate command lines in history
setopt HIST_REDUCE_BLANKS # remove superfluous blanks from history
setopt HIST_IGNORE_SPACE  # do not store a command in history if it begins with a space
setopt HIST_NO_STORE      # do not store the `history` command
setopt HIST_FIND_NO_DUPS  # do not display dups when searching using ^R
setopt HIST_NO_FUNCTIONS  # remove function definition from history

#######
# git #
#######

# `g` will invoke `git status -s`
# `g a b c` will invoke `git a b c`
g()
{
  # Used by zsh-git-prompt
  __EXECUTED_GIT_COMMAND=1

  if (( $# == 0 )) ; then
    \git status -s
  else
    \git "$@"
  fi
}
compdef g=git

# Disable globbing to avoid problem with parameter containing #[] etc...
alias g='noglob \g'
alias git='g'

######
# ls #
######

unalias ls &>/dev/null
LS_OPTIONS=''
if is_linux ; then
  LS_OPTIONS='--color=auto'
elif is_bsd || is_macosx ; then
  LS_OPTIONS='-G'
fi
alias ls="ls -p -F $LS_OPTIONS"
alias ll='ls -hl' ; compdef ll=ls
alias l='ll' ; compdef l=ls
alias la='ll -A' ; compdef la=ls

# good ls colors (even on OSX)
unset CLICOLOR
unset LS_COLORS
unset LSCOLORS
if is_macosx || is_bsd ; then
  export CLICOLOR=1
  export LSCOLORS=ExGxxxdxCxDxDxxxaxExEx
else
  export CLICOLOR=0
fi

###########
# Options #
###########

# Directory
setopt AUTO_CD			     # change directory without cd
setopt AUTO_PUSHD        # cd to pushd stack
setopt PUSHD_IGNORE_DUPS # don't push dup to cd history

# No beep
unsetopt BEEP			 # no beep
unsetopt HIST_BEEP # no beep
unsetopt LIST_BEEP # no beep

# Input/Output
setopt ALIASES			  # expand aliases
setopt CORRECT        # auto correct command
unsetopt CORRECT_ALL	# do not auto correct the whole command line
unsetopt RM_STAR_WAIT # don't wait after `rm *`

# Job Control
setopt CHECK_JOBS    # warn about background jobs before shell exit

## Scripts and Functions
setopt C_BASES       # write base X numbers using C-style (e.g.: 0xFF instead of 16#FF)
setopt C_PRECEDENCES # alter operators precedence to be more C-like

## Expansion and Globbing
setopt RC_EXPAND_PARAM # expand foo${xx}bar to 'fooabar foobbar foocbar' if xx=(a b c)
setopt EXTENDED_GLOB   # advanced globbing

##########
# Prompt #
##########

setopt TRANSIENT_RPROMPT    # remove right prompt after accepting a command line

# Git prompt
if [ -r "$HOME/.zsh/bundle/zsh-git-prompt/zshrc.sh" ] ; then
  source "$HOME/.zsh/bundle/zsh-git-prompt/zshrc.sh"

  # Set install directory
  export __GIT_PROMPT_DIR="$HOME/.zsh/bundle/zsh-git-prompt"

  # Update git var
  chpwd_update_git_vars

  # Change defaults values
  ZSH_THEME_GIT_PROMPT_PREFIX="("
  ZSH_THEME_GIT_PROMPT_SUFFIX=")"
  ZSH_THEME_GIT_PROMPT_SEPARATOR="|"
  ZSH_THEME_GIT_PROMPT_BRANCH="${COLOR_YELLOW}"
  ZSH_THEME_GIT_PROMPT_STAGED="${COLOR_GREEN}±"
  ZSH_THEME_GIT_PROMPT_CONFLICTS="${COLOR_ORANGE}×"
  ZSH_THEME_GIT_PROMPT_CHANGED="${COLOR_RED}≠"
  ZSH_THEME_GIT_PROMPT_REMOTE=""
  ZSH_THEME_GIT_PROMPT_UNTRACKED="…"
  ZSH_THEME_GIT_PROMPT_CLEAN="${COLOR_LIGHT_GREEN}✓"
fi

# set content
function set_prompt()
{
  # get git information for the current directory
  git_prompt="$(git_super_status)"

  # left prompt
  if [ -n "$(jobs)" ] ; then
    PROMPT="[${COLOR_SMOOTH_GREEN}%j${COLOR_RESET}&:?${COLOR_SMOOTH_GREEN}%?${COLOR_RESET}] "
  else
    PROMPT="%(0?..[${COLOR_SMOOTH_GREEN}%j${COLOR_RESET}&:?${COLOR_SMOOTH_GREEN}%?${COLOR_RESET}] )"
  fi
  PROMPT="$PROMPT$COLOR_BLUE%30<...<%~%<<$COLOR_RESET${git_prompt:+ $git_prompt} "
  PROMPT="$PROMPT%(!.#.$) "

  # right prompt
  RPROMPT="[%n$COLOR_BLUE@$COLOR_RESET%M]"
  if [ -n "$SHLVL" ] && (( $SHLVL > 1 )) ; then
    RPROMPT="$RPROMPT {^$COLOR_BLUE%L$COLOR_RESET}"
  fi
}

# Disable flow control (^S / ^Q)
stty stop undef
stty start undef

########
# Sudo #
########

insert_sudo () { zle beginning-of-line; zle -U "sudo " }
zle -N insert-sudo insert_sudo
bindkey "^[s" insert-sudo

############
# Terminal #
############

# set the tab name
function tabname {
  printf "\e]1;${1:-default}\a"
}

# set the window name
function winname {
  printf "\e]2;$1\a"
}

str=`whoami`@`hostname`

tabname $str
winname $str

########
# Tmux #
########

if [ -n "$TMUX" ] ; then
  export TERM=screen-256color
else
  export TERM=xterm-256color
fi

#########
# Hooks #
#########

autoload -U add-zsh-hook

# Refresh the prompt
add-zsh-hook precmd set_prompt
